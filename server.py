# server.py
import os
import uvicorn
import logging
import json
from fastapi import FastAPI, Request, HTTPException, Header
from fastapi.responses import JSONResponse
from typing import Optional, Dict, Any
from datetime import datetime

from src.config.settings import get_settings
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.present_repository import PresentRepository
from src.lib.clients.telegram_client import TelegramClient
from src.domain.service.language_service import LanguageService
from src.services.keyboard_service import KeyboardService
from src.lib.bot_instance import get_bot_instance
from src.domain.entity.present import Present

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
settings = get_settings()
app = FastAPI(title="BotHub WebHook Server", version="1.0.0")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
tg_client = TelegramClient(settings.TELEGRAM_TOKEN, settings.TELEGRAM_API_URL)
keyboard_service = KeyboardService()


@app.post("/bothub-webhook")
async def bothub_webhook(
        request: Request,
        botsecretkey: Optional[str] = Header(None)
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç BotHub (–∞–Ω–∞–ª–æ–≥ PHP WebhookController.php)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        if not botsecretkey or botsecretkey != settings.BOTHUB_SECRET_KEY:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: {botsecretkey}")
            return JSONResponse(
                status_code=400,
                content={"error": "Incorrect Bothub webhook data (incorrect secret key)"}
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            body = await request.body()
            data = json.loads(body.decode('utf-8'))
            logger.info(f"Webhook data: {data}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return JSONResponse(
                status_code=400,
                content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not data or "type" not in data:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'type'")
            return JSONResponse(
                status_code=400,
                content={"error": "Incorrect Bothub webhook data: missing type"}
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è Python-–±–æ—Ç–∞
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —Ñ–ª–∞–≥ pythonBot: true, —Ç–∞–∫ –∏ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞
        is_python_bot = data.get("pythonBot", False)

        # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "merge" –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ pythonBot
        if data["type"] == "merge" and not is_python_bot:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å merge –±–µ–∑ —Ñ–ª–∞–≥–∞ pythonBot, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è PHP-–±–æ—Ç–∞")
            # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è PHP-–±–æ—Ç–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
            # –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            return JSONResponse(
                status_code=200,
                content={"status": "ignored", "message": "This merge request is not intended for Python bot"}
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤
        webhook_type = data["type"]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        user_repository = UserRepository()
        present_repository = PresentRepository()

        if webhook_type == "merge":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ PHP bothubHook)
            return await handle_merge_webhook(data, user_repository)

        elif webhook_type == "present":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
            return await handle_present_webhook(data, user_repository, present_repository)

        elif webhook_type == "presentViaEmail":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ email
            return await handle_present_via_email_webhook(data, user_repository)

        elif webhook_type == "message":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç BotHub
            return await handle_message_webhook(data, user_repository)

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞: {webhook_type}")
            return JSONResponse(
                status_code=400,
                content={"error": f"Incorrect Bothub webhook data: unknown type {webhook_type}"}
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}
        )


async def handle_merge_webhook(data: Dict[str, Any], user_repository: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["oldId", "newId", "email"]
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        return JSONResponse(
            status_code=400,
            content={"error": f"Incorrect Bothub webhook data: missing fields {missing_fields}"}
        )

    old_id = data["oldId"]
    new_id = data["newId"]
    email = data["email"]

    # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è Python-–±–æ—Ç–∞
    is_python_bot = data.get("pythonBot", False)

    logger.info(f"Merge: {old_id} -> {new_id} ({email}), Python bot: {is_python_bot}")

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        all_users = await user_repository.get_all(limit=10, offset=0)
        logger.info(f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î: {[(u.id, u.bothub_id) for u in all_users]}")
        logger.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å bothub_id={old_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ bothub_id
        user = await user_repository.find_by_bothub_id(old_id)

        if not user and is_python_bot:
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è Python-–±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞—Ä–æ–º—É ID,
            # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ TG ID (—Ç.–∫. oldId –º–æ–∂–µ—Ç –±—ã—Ç—å TG ID, –∞ –Ω–µ bothub_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ bothub_id, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ tg_id: {old_id}")
            user = await user_repository.find_by_tg_id(old_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"}
        )

    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={old_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏ –∫–∞–∫ bothub_id, –Ω–∏ –∫–∞–∫ tg_id)")
        return JSONResponse(
            status_code=404,
            content={"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.bothub_id = new_id
    user.email = email
    user.bothub_access_token = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    user.state = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await user_repository.update(user)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ–≤—ã–π bothub_id: {new_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}
        )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        language_service = LanguageService(user.language_code or "en")
        content = language_service.get_string("accounts_merged", [user.email])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_buttons = [
            [{"text": "üîÑ –ù–æ–≤—ã–π —á–∞—Ç"}, {"text": "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"}],
            [{"text": "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"}]
        ]
        keyboard = {"keyboard": keyboard_buttons, "resize_keyboard": True}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await tg_client.send_message(
            chat_id=user.tg_id,
            text=content,
            reply_markup=keyboard
        )

        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {user.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {email}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        return {"status": "success", "message": "Account connected"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
        # —Ç–∞–∫ –∫–∞–∫ –≤–∞–∂–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        return {"status": "success", "message": "Account connected, notification failed"}


async def handle_present_webhook(
        data: Dict[str, Any],
        user_repository: UserRepository,
        present_repository: PresentRepository
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–∞–Ω–∞–ª–æ–≥ PHP present)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["userId", "tokens", "fromUserId"]
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        return JSONResponse(
            status_code=400,
            content={"error": f"Incorrect Bothub webhook data: missing fields {missing_fields}"}
        )

    from_user_id = data["fromUserId"]
    user_id = data["userId"]
    tokens = data["tokens"]
    via_email = data.get("viaEmail", False)

    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    from_user = await user_repository.find_by_bothub_id(from_user_id)
    if not from_user:
        logger.error(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å bothub_id={from_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return JSONResponse(
            status_code=404,
            content={"error": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        )

    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    from_user_lang = LanguageService(from_user.language_code or "en")
    from_user_keyboard = keyboard_service.get_main_keyboard(from_user_lang, from_user)

    if via_email:
        # –ü–æ–¥–∞—Ä–æ–∫ –ø–æ email
        content = from_user_lang.get_string("present_done_email")
        await tg_client.send_message(
            chat_id=from_user.tg_id,
            text=content,
            reply_markup=from_user_keyboard
        )
    else:
        # –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = await user_repository.find_by_bothub_id(user_id)
        if not user:
            logger.error(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å bothub_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return JSONResponse(
                status_code=404,
                content={"error": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
        present = await add_present(user, tokens, present_repository)

        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        user_lang = LanguageService(user.language_code or "en")
        user_keyboard = keyboard_service.get_main_keyboard(user_lang, user)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        sender_content = from_user_lang.get_string("present_done")
        await tg_client.send_message(
            chat_id=from_user.tg_id,
            text=sender_content,
            reply_markup=from_user_keyboard
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        resend_content = from_user_lang.get_string("present_resend_notification")
        await tg_client.send_message(
            chat_id=from_user.tg_id,
            text=resend_content,
            reply_markup=from_user_keyboard
        )

    return {"status": "success", "message": "Present processed"}


async def handle_present_via_email_webhook(data: Dict[str, Any], user_repository: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ email (–∞–Ω–∞–ª–æ–≥ PHP presentViaEmail)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["userId", "tokens", "fromUserId"]
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        return JSONResponse(
            status_code=400,
            content={"error": f"Incorrect Bothub webhook data: missing fields {missing_fields}"}
        )

    from_user_id = data["fromUserId"]

    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    from_user = await user_repository.find_by_bothub_id(from_user_id)
    if not from_user:
        logger.error(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å bothub_id={from_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return JSONResponse(
            status_code=404,
            content={"error": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        )

    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    from_user_lang = LanguageService(from_user.language_code or "en")
    from_user_keyboard = keyboard_service.get_main_keyboard(from_user_lang, from_user)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    content = from_user_lang.get_string("present_done_email")
    await tg_client.send_message(
        chat_id=from_user.tg_id,
        text=content,
        reply_markup=from_user_keyboard
    )

    return {"status": "success", "message": "Present via email processed"}


async def handle_message_webhook(data: Dict[str, Any], user_repository: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç BotHub (–∞–Ω–∞–ª–æ–≥ PHP message)"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
            "message" not in data or
            "additional_content" not in data["message"] or
            "relatedMessageId" not in data or
            "chat_id" not in data["message"] or
            "content" not in data["message"]["additional_content"]
    ):
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return JSONResponse(
            status_code=400,
            content={"error": "Incorrect Bothub webhook data: missing required fields"}
        )

    # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç BotHub
    # –ù–æ –º—ã –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç BotHub: {data['message']['additional_content']['content']}")

    return {"status": "success", "message": "Message received"}


async def add_present(user, tokens, present_repository):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    present = Present(
        user_id=user.id,
        tokens=tokens,
        notified=False,
    )

    await present_repository.save(present)
    return present


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}


if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get("PORT", 8001))
    uvicorn.run(app, host="0.0.0.0", port=port)