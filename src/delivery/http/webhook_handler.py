from fastapi import APIRouter, Request, HTTPException, Depends, Header
from fastapi.responses import JSONResponse
from typing import Dict, Any, Optional
import json
import logging
from datetime import datetime

from src.config.settings import get_settings, Settings
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.chat_repository import ChatRepository
from src.adapter.repository.present_repository import PresentRepository
from src.domain.usecase.present import PresentUseCase
from src.domain.entity.user import User
from src.lib.clients.bothub_client import BothubClient
from src.adapter.gateway.bothub_gateway import BothubGateway
from src.domain.usecase.chat_session import ChatSessionUseCase

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter(tags=["webhooks"])
logger = logging.getLogger(__name__)


# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
async def get_user_repository(settings: Settings = Depends(get_settings)):
    db_path = settings.DB_PATH
    repository = UserRepository(db_path)
    return repository


async def get_chat_repository(settings: Settings = Depends(get_settings)):
    db_path = settings.DB_PATH
    repository = ChatRepository(db_path)
    return repository


async def get_present_repository(settings: Settings = Depends(get_settings)):
    db_path = settings.DB_PATH
    repository = PresentRepository(db_path)
    return repository


# –ì–µ–π—Ç–≤–µ–∏
async def get_bothub_gateway(settings: Settings = Depends(get_settings)):
    client = BothubClient(settings)
    gateway = BothubGateway(client)
    return gateway


# –Æ–∑–∫–µ–π—Å—ã
async def get_present_usecase(
        present_repository: PresentRepository = Depends(get_present_repository),
        bothub_gateway: BothubGateway = Depends(get_bothub_gateway)
):
    return PresentUseCase(present_repository, bothub_gateway)


async def get_chat_session_usecase(
        bothub_gateway: BothubGateway = Depends(get_bothub_gateway)
):
    return ChatSessionUseCase(bothub_gateway)


@router.post("/bothub-webhook")
async def bothub_webhook(
        request: Request,
        settings: Settings = Depends(get_settings),
        user_repository: UserRepository = Depends(get_user_repository),
        chat_repository: ChatRepository = Depends(get_chat_repository),
        present_usecase: PresentUseCase = Depends(get_present_usecase),
        chat_session_usecase: ChatSessionUseCase = Depends(get_chat_session_usecase),
        botsecretkey: Optional[str] = Header(None)
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç BotHub"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        if not botsecretkey or botsecretkey != settings.BOTHUB_SECRET_KEY:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤–µ–±—Ö—É–∫–∞: {botsecretkey}")
            return JSONResponse(
                status_code=403,
                content={"error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"}
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
        try:
            body = await request.body()
            text = body.decode('utf-8')
            if not text:
                logger.error("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
                return JSONResponse(
                    status_code=400,
                    content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ (–ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ)"}
                )

            data = json.loads(text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(e)}")
            return JSONResponse(
                status_code=400,
                content={"error": f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}"}
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞
        if not data.get("type"):
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞: {data}")
            return JSONResponse(
                status_code=400,
                content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø)"}
            )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ —Ç–∏–ø–∞: {data['type']}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–µ–±—Ö—É–∫–æ–≤
        if data["type"] == "merge":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            if not data.get("oldId") or not data.get("newId") or "email" not in data:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ 'merge': {data}")
                return JSONResponse(
                    status_code=400,
                    content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ç–∏–ø–∞ 'merge'"}
                )

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç–∞—Ä–æ–º—É ID
            user = await user_repository.find_by_bothub_id(data["oldId"])
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å bothub_id={data['oldId']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return JSONResponse(
                    status_code=404,
                    content={"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.bothub_id = data["newId"]
            user.email = data["email"]
            user.bothub_access_token = None
            user.state = None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await user_repository.update(user)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.TELEGRAM_TOKEN)
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                lang = user.language_code or "en"
                message = f"üîó –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É {user.email}" if lang == "ru" else f"üîó Your account has been successfully linked to {user.email}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user.telegram_id:
                    await bot.send_message(chat_id=user.telegram_id, text=message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} –æ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            finally:
                await bot.session.close()

            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É {data['email']}")
            return {"status": "success"}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ message
        elif data["type"] == "message":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (not data.get("message") or not data["message"].get("additional_content") or
                    not data.get("relatedMessageId") or not data["message"].get("chat_id") or
                    not data["message"]["additional_content"].get("content")):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ 'message': {data}")
                return JSONResponse(
                    status_code=400,
                    content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ç–∏–ø–∞ 'message'"}
                )

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            related_message_id = int(data["relatedMessageId"])
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ message —Å relatedMessageId={related_message_id}")

            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id = data["message"]["chat_id"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if data["message"]["additional_content"].get("imageUrls"):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(data['message']['additional_content']['imageUrls'])}")
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            return {"status": "success"}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ present (–ø–æ–¥–∞—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤)
        elif data["type"] == "present":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not data.get("userId") or not data.get("tokens") or not data.get("fromUserId"):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ 'present': {data}")
                return JSONResponse(
                    status_code=400,
                    content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ç–∏–ø–∞ 'present'"}
                )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ email –∏–ª–∏ —á–µ—Ä–µ–∑ telegram
            if data.get("viaEmail"):
                # –ü–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ email
                from_user = await user_repository.find_by_bothub_id(data["fromUserId"])
                if not from_user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å bothub_id={data['fromUserId']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return JSONResponse(
                        status_code=404,
                        content={"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                from aiogram import Bot
                bot = Bot(token=settings.TELEGRAM_TOKEN)
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    lang = from_user.language_code or "en"
                    message = "üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email!" if lang == "ru" else "üéÅ Gift successfully sent to the specified email!"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if from_user.telegram_id:
                        await bot.send_message(chat_id=from_user.telegram_id, text=message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                finally:
                    await bot.session.close()
            else:
                # –ü–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram
                user = await user_repository.find_by_bothub_id(data["userId"])
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å bothub_id={data['userId']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return JSONResponse(
                        status_code=404,
                        content={"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
                await present_usecase.add_present(user, int(data["tokens"]))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                from_user = await user_repository.find_by_bothub_id(data["fromUserId"])
                if from_user:
                    from aiogram import Bot
                    bot = Bot(token=settings.TELEGRAM_TOKEN)
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        lang = from_user.language_code or "en"
                        message = "üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if lang == "ru" else "üéÅ Gift successfully sent!"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if from_user.telegram_id:
                            await bot.send_message(chat_id=from_user.telegram_id, text=message)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    finally:
                        await bot.session.close()

            return {"status": "success"}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ presentViaEmail (–ø–æ–¥–∞—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ email)
        elif data["type"] == "presentViaEmail":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not data.get("userId") or not data.get("tokens") or not data.get("fromUserId"):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ 'presentViaEmail': {data}")
                return JSONResponse(
                    status_code=400,
                    content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ç–∏–ø–∞ 'presentViaEmail'"}
                )

            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_user = await user_repository.find_by_bothub_id(data["fromUserId"])
            if not from_user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å bothub_id={data['fromUserId']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return JSONResponse(
                    status_code=404,
                    content={"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            from aiogram import Bot
            bot = Bot(token=settings.TELEGRAM_TOKEN)
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                lang = from_user.language_code or "en"
                message = "üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email!" if lang == "ru" else "üéÅ Gift successfully sent to the specified email!"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if from_user.telegram_id:
                    await bot.send_message(chat_id=from_user.telegram_id, text=message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            finally:
                await bot.session.close()

            return {"status": "success"}

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞: {data['type']}")
            return {"status": "success"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞ BotHub: {str(e)}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}
        )


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok"}