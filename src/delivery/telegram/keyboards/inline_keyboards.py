# src/delivery/telegram/keyboards/inline_keyboards.py

import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Optional


def get_image_model_inline_keyboard(models: List[Dict], current_model: Optional[str] = None) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    buttons = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_models = [model for model in models if "TEXT_TO_IMAGE" in model.get("features", [])]

    for model in image_models:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        is_selected = model.get("id") == current_model
        text = f"{model_name} {'‚úÖ' if is_selected else ''}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        is_allowed = model.get("is_allowed", False)
        if not is_allowed:
            text += " üîí"

        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä callback_data, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏
        # t - —Ç–∏–ø (type), m - model_id, a - allowed
        callback_data = json.dumps({
            "t": "img_m",  # img_m = –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "m": model.get("id"),
            "a": 1 if is_allowed else 0
        })

        buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"t": "c"}))])  # c = cancel

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_chat_model_inline_keyboard(models: List[Dict], current_model: Optional[str] = None) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞"""
    buttons = []

    for model in models:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        is_selected = model.get("id") == current_model
        text = f"{model_name} {'‚úÖ' if is_selected else ''}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        is_allowed = model.get("is_allowed", False)
        if not is_allowed:
            text += " üîí"

        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä callback_data, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏
        # t - —Ç–∏–ø (type), m - model_id, a - allowed
        callback_data = json.dumps({
            "t": "m",  # m = –º–æ–¥–µ–ª—å
            "m": model.get("id"),
            "a": 1 if is_allowed else 0
        })

        buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"t": "c"}))])  # c = cancel

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_context_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    buttons = [
        [InlineKeyboardButton(
            text=f"–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if enabled else ''}",
            callback_data=json.dumps({"t": "ctx", "a": "on"})
        )],
        [InlineKeyboardButton(
            text=f"–ù–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if not enabled else ''}",
            callback_data=json.dumps({"t": "ctx", "a": "off"})
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=json.dumps({"t": "c"})
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)