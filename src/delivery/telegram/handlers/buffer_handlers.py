# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ src/delivery/telegram/handlers/buffer_handlers.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import logging
from ..keyboards.main_keyboard import get_main_keyboard
from .base_handlers import get_or_create_user, get_or_create_chat

logger = logging.getLogger(__name__)


def register_buffer_handlers(router: Router, buffer_usecase, user_repository, chat_repository):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º"""

    @router.message(Command("buffer"))
    async def handle_buffer_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /buffer –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞"""
        try:
            user = await get_or_create_user(message, user_repository)
            chat = await get_or_create_chat(user, chat_repository)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—É —Å –±—É—Ñ–µ—Ä–æ–º
            if not is_text_model(chat.bothub_chat_model):
                await message.answer(
                    f"‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ {chat.bothub_chat_model}. "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /gpt\\_config",
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )
                return

            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.state = "buffer_mode"
            await user_repository.update(user)

            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
            if hasattr(chat, 'buffer') and chat.buffer:
                # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏:
                # await buffer_usecase.clear_buffer(chat)
                chat.buffer = {}
                await chat_repository.update(chat)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –±—É—Ñ–µ—Ä–∞
            buffer_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )

            await message.answer(
                "üìã –†–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–æ–¥–µ–ª–∏ "
                "—Å—Ä–∞–∑—É, –∞ –Ω–∞–∫–æ–ø—è—Ç—Å—è –≤ –±—É—Ñ–µ—Ä–µ.\n\n"
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å\".\n"
                "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –±—É—Ñ–µ—Ä–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∞\".",
                parse_mode="Markdown",
                reply_markup=buffer_keyboard
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±—É—Ñ–µ—Ä–∞: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –±—É—Ñ–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )