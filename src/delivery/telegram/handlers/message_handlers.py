from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums.chat_action import ChatAction
import logging
import time
import os
import tempfile
from typing import List, Dict, Any, Optional, Tuple

from src.config.settings import Settings
from ..keyboards.main_keyboard import get_main_keyboard
from .base_handlers import get_or_create_user, get_or_create_chat, send_long_message, download_telegram_file
from ..services.model_service import show_model_selection

logger = logging.getLogger(__name__)


def register_message_handlers(router: Router, chat_session_usecase, intent_detection_service,
                              user_repository, chat_repository, settings, account_connection_usecase):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @router.message(F.text.startswith("üîÑ –ù–æ–≤—ã–π —á–∞—Ç"))
    async def handle_new_chat_button(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π —á–∞—Ç'"""
        try:
            user = await get_or_create_user(message, user_repository)
            chat = await get_or_create_chat(user, chat_repository)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chat.reset_context_counter()
            await chat_repository.update(chat)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ BotHub API
            await chat_session_usecase.create_new_chat(user, chat)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
            model_info = f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é *{chat.bothub_chat_model or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}*"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if chat.context_remember:
                context_info = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
            else:
                context_info = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ."

            await message.answer(
                f"{model_info}{context_info}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user, chat)
            )

            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å –º–æ–¥–µ–ª—å—é {chat.bothub_chat_model}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: {str(e)}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )

    @router.message(F.text.startswith("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"))
    async def handle_change_model_button(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å'"""
        try:
            await show_model_selection(message, user_repository, chat_repository)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏: {str(e)}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gpt_config –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.",
                parse_mode="Markdown"
            )

    @router.message(F.text.startswith("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    async def handle_link_account_button(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'"""
        try:
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ account_handlers
            from .account_handlers import handle_link_account_logic
            await handle_link_account_logic(message, user_repository, chat_repository, account_connection_usecase)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_account",
                parse_mode="Markdown"
            )

    @router.message(F.text)
    async def handle_text_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message, user_repository)
            chat = await get_or_create_chat(user, chat_repository)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π —á–∞—Ç–∞
            chat_emojis = {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 2, "3Ô∏è‚É£": 3, "4Ô∏è‚É£": 4, "üìù": 5}
            for emoji, index in chat_emojis.items():
                if message.text.startswith(emoji):
                    user.current_chat_index = index
                    await user_repository.update(user)

                    chat = await get_or_create_chat(user, chat_repository)

                    await message.answer(
                        f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç {index}" + (f" | {chat.name}" if chat.name else ""),
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )
                    return

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Ç, –ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            intent_type, intent_data = intent_detection_service.detect_intent(message.text, str(user.id))

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent_type}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
            text = message.text
            if chat.links_parse:
                # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
                # text = await links_parser.parse_urls(text)
                pass

            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π
                if intent_type.value == "chat":
                    # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
                    result = await _handle_chat_intent(chat_session_usecase, user, chat, text)
                elif intent_type.value == "web_search":
                    # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
                    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫
                    await message.answer(
                        "üîç –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )
                    return
                elif intent_type.value == "image_generation":
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    await message.answer(
                        "üé® –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )
                    return
                else:
                    # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    result = await _handle_chat_intent(chat_session_usecase, user, chat, text)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç–∞
                await _process_chat_response(message, result, user, chat, chat_repository)

            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ BotHub API: {api_error}", exc_info=True)

                # –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_message = str(api_error)
                if "NOT_ENOUGH_TOKENS" in error_message:
                    error_text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /link_account –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
                elif "502 Bad Gateway" in error_message or "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in error_message:
                    error_text = "‚ùå –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

                await message.answer(
                    error_text,
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )

    @router.message(F.voice)
    async def handle_voice_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message, user_repository)
            chat = await get_or_create_chat(user, chat_repository)

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
            processing_msg = await message.answer(
                "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                parse_mode="Markdown"
            )

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_id = message.voice.file_id

                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                temp_dir = tempfile.gettempdir()
                temp_file_path = os.path.join(temp_dir, f"voice_{int(time.time())}.ogg")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                await download_telegram_file(message.bot, settings.TELEGRAM_TOKEN, file_id, temp_file_path)

                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                transcribed_text = await chat_session_usecase.transcribe_voice(user, chat, temp_file_path)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await message.bot.delete_message(message.chat.id, processing_msg.message_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
                await message.answer(
                    f"üîä ‚Üí üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ:\n\n{transcribed_text}",
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(temp_file_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file_path}")
                except Exception as cleanup_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {cleanup_error}")

            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {file_error}", exc_info=True)
                await message.bot.delete_message(message.chat.id, processing_msg.message_id)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )


async def _handle_chat_intent(chat_session_usecase, user, chat, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —á–∞—Ç–∞ ID –≤ BotHub
    if not chat.bothub_chat_id:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        await chat_session_usecase.create_new_chat(user, chat)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    return await chat_session_usecase.send_message(user, chat, text)


async def _process_chat_response(message, result, user, chat, chat_repository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–∞—Ç–∞"""
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if chat.context_remember:
        chat.increment_context_counter()
        await chat_repository.update(chat)

    if "response" in result and "content" in result["response"]:
        content = result["response"]["content"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—É–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if chat.formula_to_image:
            # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª
            # content = await formula_service.format_formulas(content)
            pass

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
        if len(content) > 4000:
            await send_long_message(message, content)
        else:
            await message.answer(
                content,
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user, chat)
            )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if "tokens" in result:
            tokens_info = f"`-{result['tokens']} caps`"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
            if chat.context_remember:
                tokens_info += f"\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: /continue\n\n–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: /reset"

            await message.answer(
                tokens_info,
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user, chat)
            )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if "attachments" in result["response"] and result["response"]["attachments"]:
            for attachment in result["response"]["attachments"]:
                if "file" in attachment and attachment["file"].get("type") == "IMAGE":
                    url = attachment["file"].get("url", "")
                    if not url and "path" in attachment["file"]:
                        url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                    if url:
                        await message.answer_photo(
                            url,
                            caption=None,
                            reply_markup=get_main_keyboard(user, chat)
                        )

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å—Ç–∏–≥–ª–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 10 –∑–Ω–∞—á–µ–Ω–∏—è,
    # –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if chat.context_remember and chat.context_counter > 0 and chat.context_counter % 10 == 0:
        await message.answer(
            "üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –≤–∞—à –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –¥–ª—è —É—á–µ—Ç–∞ –≤—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ "
            "–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ caps. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞—Ç—Ä–∞—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ "
            "–Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reset.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(user, chat)
        )