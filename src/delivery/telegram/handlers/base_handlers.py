import logging
import os
from aiogram import Bot
from aiogram.types import Message
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
import aiohttp
logger = logging.getLogger(__name__)

async def get_or_create_user(message: Message, user_repository):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    telegram_id = str(message.from_user.id)
    user = await user_repository.find_by_telegram_id(telegram_id)

    if not user:
        user = User(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            telegram_id=telegram_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
            language_code=message.from_user.language_code,
            current_chat_index=1,
            current_chat_list_page=1
        )
        user_id = await user_repository.save(user)
        user.id = user_id

    return user

async def get_or_create_chat(user: User, chat_repository):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat = await chat_repository.find_by_user_id_and_chat_index(user.id, user.current_chat_index)

    if not chat:
        chat = Chat(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_id=user.id,
            chat_index=user.current_chat_index,
            context_remember=True,
            context_counter=0,
            links_parse=False,
            formula_to_image=False,
            answer_to_voice=False
        )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—è—Ç–æ–≥–æ —á–∞—Ç–∞ (üìù)
        if user.current_chat_index == 5:
            chat.context_remember = False
            chat.system_prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã."

        chat_id = await chat_repository.save(chat)
        chat.id = chat_id

    return chat

async def send_long_message(message: Message, content: str, parse_mode: str = "Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    max_length = 3900 if parse_mode == "Markdown" else 4096

    if len(content) <= max_length:
        await message.answer(content, parse_mode=parse_mode)
        return

    parts = []
    while content:
        if len(content) <= max_length:
            parts.append(content)
            content = ""
        else:
            last_newline = content[:max_length].rfind("\n")
            if last_newline == -1:
                last_newline = max_length
            parts.append(content[:last_newline])
            content = content[last_newline:]

    for part in parts:
        await message.answer(part, parse_mode=parse_mode)


async def download_telegram_file(token: str, file_id: str, save_path: str = None):
    base_url = "http://telegram-bot-api:8081"
    logger.info(f"[download_telegram_file] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π base_url: {base_url}")
    logger.info(f"[download_telegram_file] Telegram token: {token}")
    logger.info(f"[download_telegram_file] file_id: {file_id}")

    async with aiohttp.ClientSession() as session:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        get_file_url = f"{base_url}/bot{token}/getFile"
        logger.info(f"[download_telegram_file] URL –¥–ª—è getFile: {get_file_url}")
        async with session.get(get_file_url, params={"file_id": file_id}) as response:
            logger.info(f"[download_telegram_file] –û—Ç–≤–µ—Ç –æ—Ç getFile: HTTP {response.status}")
            response_text = await response.text()
            if response.status != 200:
                logger.error(
                    f"[download_telegram_file] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ getFile: HTTP {response.status}, {response_text}")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ getFile: HTTP {response.status}, {response_text}")

            data = await response.json()
            if not data.get("ok"):
                logger.error(f"[download_telegram_file] Telegram API error: {data.get('description')}")
                raise Exception(f"Telegram API error: {data.get('description')}")

            file_path = data["result"]["file_path"]
            logger.info(f"[download_telegram_file] –ü–æ–ª—É—á–µ–Ω file_path: {file_path}")

        # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—É—Ç—å –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç /telegram-bot-api-data/TOKEN/voice/file_name.oga
        parts = file_path.split('/')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏–º—è —Ñ–∞–π–ª–∞
        if len(parts) >= 4:
            file_type = parts[-2]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'voice'
            file_name = parts[-1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'file_15.oga'

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π API
            download_url = f"{base_url}/file/bot{token}/{file_type}/{file_name}"
            logger.info(f"[download_telegram_file] URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {download_url}")

            async with session.get(download_url) as file_response:
                logger.info(f"[download_telegram_file] –û—Ç–≤–µ—Ç –æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: HTTP {file_response.status}")

                if file_response.status != 200:
                    # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                    simple_url = f"{base_url}/file/bot{token}/{file_name}"
                    logger.info(f"[download_telegram_file] –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π URL: {simple_url}")

                    async with session.get(simple_url) as simple_response:
                        logger.info(f"[download_telegram_file] –û—Ç–≤–µ—Ç –æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ URL: HTTP {simple_response.status}")

                        if simple_response.status != 200:
                            error_text = await simple_response.text()
                            logger.error(
                                f"[download_telegram_file] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: HTTP {simple_response.status}, {error_text}")
                            raise Exception(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤–∞—à–µ–≥–æ Telegram Bot API —Å–µ—Ä–≤–µ—Ä–∞.")

                        file_data = await simple_response.read()
                else:
                    file_data = await file_response.read()
        else:
            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É: {file_path}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        if save_path:
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            with open(save_path, "wb") as f:
                f.write(file_data)
            logger.info(f"[download_telegram_file] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: {save_path}")
            return save_path

        logger.info(f"[download_telegram_file] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
        return file_data