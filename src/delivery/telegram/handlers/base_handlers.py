import logging
import os
from aiogram import Bot
from aiogram.types import Message
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
import aiohttp
logger = logging.getLogger(__name__)

async def get_or_create_user(message: Message, user_repository):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    telegram_id = str(message.from_user.id)
    user = await user_repository.find_by_telegram_id(telegram_id)

    if not user:
        user = User(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            telegram_id=telegram_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
            language_code=message.from_user.language_code,
            current_chat_index=1,
            current_chat_list_page=1
        )
        user_id = await user_repository.save(user)
        user.id = user_id

    return user

async def get_or_create_chat(user: User, chat_repository):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat = await chat_repository.find_by_user_id_and_chat_index(user.id, user.current_chat_index)

    if not chat:
        chat = Chat(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_id=user.id,
            chat_index=user.current_chat_index,
            context_remember=True,
            context_counter=0,
            links_parse=False,
            formula_to_image=False,
            answer_to_voice=False
        )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—è—Ç–æ–≥–æ —á–∞—Ç–∞ (üìù)
        if user.current_chat_index == 5:
            chat.context_remember = False
            chat.system_prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã."

        chat_id = await chat_repository.save(chat)
        chat.id = chat_id

    return chat

async def send_long_message(message: Message, content: str, parse_mode: str = "Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    max_length = 3900 if parse_mode == "Markdown" else 4096

    if len(content) <= max_length:
        await message.answer(content, parse_mode=parse_mode)
        return

    parts = []
    while content:
        if len(content) <= max_length:
            parts.append(content)
            content = ""
        else:
            last_newline = content[:max_length].rfind("\n")
            if last_newline == -1:
                last_newline = max_length
            parts.append(content[:last_newline])
            content = content[last_newline:]

    for part in parts:
        await message.answer(part, parse_mode=parse_mode)


async def download_telegram_file(bot, file_id: str, save_path: str = None, settings=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Telegram API, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
        file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª)
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Returns:
        str: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        logger.info(f"[FILE_DOWNLOAD] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —Å ID: {file_id}")
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        logger.info(f"[FILE_DOWNLOAD] –ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
        logger.info(f"[FILE_DOWNLOAD] –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info}")

        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if not save_path:
            import tempfile
            import os
            import time
            temp_dir = tempfile.gettempdir()
            file_ext = os.path.splitext(file_path)[
                           1] or '.ogg'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∏–ª–∏ .ogg –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            save_path = os.path.join(temp_dir, f"{file_id}_{int(time.time())}{file_ext}")
            logger.info(f"[FILE_DOWNLOAD] –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_path}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        logger.info(f"[FILE_DOWNLOAD] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {os.path.dirname(save_path)}")

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        paths_to_check = [
            # –ü—Ä—è–º–æ–π –ø—É—Ç—å
            file_path,
            # –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Telegram Bot API
            f"/telegram-bot-api-data{file_path}" if not file_path.startswith("/telegram-bot-api-data") else file_path,
            # –ü—É—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–ª—ç—à–µ–º
            os.path.join("/telegram-bot-api-data", file_path.lstrip("/")),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
            os.path.join("/telegram-bot-api-data/voice", os.path.basename(file_path)),
            os.path.join("/telegram-bot-api-data/audio", os.path.basename(file_path))
        ]

        logger.info(f"[FILE_DOWNLOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Ç–∏: {paths_to_check}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
        for path in paths_to_check:
            logger.info(f"[FILE_DOWNLOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {path}")
            if os.path.exists(path):
                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(path)
                logger.info(f"[FILE_DOWNLOAD] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                import shutil
                shutil.copy(path, save_path)
                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑: {path} -> {save_path}")
                return save_path
            else:
                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ /telegram-bot-api-data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            logger.info(f"[FILE_DOWNLOAD] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            if os.path.exists("/telegram-bot-api-data"):
                logger.info(f"[FILE_DOWNLOAD] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ /telegram-bot-api-data:")
                for root, dirs, files in os.walk("/telegram-bot-api-data", topdown=True, onerror=None):
                    logger.info(f"[FILE_DOWNLOAD] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root}")
                    logger.info(f"[FILE_DOWNLOAD] –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dirs}")
                    logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª—ã: {files}")
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏
                    if root.count('/') > 4:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
                        dirs[:] = []  # –ù–µ —É–≥–ª—É–±–ª—è–µ–º—Å—è –¥–∞–ª—å—à–µ
        except Exception as e:
            logger.error(f"[FILE_DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—É—Ç—è–º
        file_name = os.path.basename(file_path)
        logger.info(f"[FILE_DOWNLOAD] –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏: {file_name} –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /telegram-bot-api-data")
        for root, dirs, files in os.walk("/telegram-bot-api-data"):
            if file_name in files:
                found_path = os.path.join(root, file_name)
                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {found_path}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(found_path)
                logger.info(f"[FILE_DOWNLOAD] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

                import shutil
                shutil.copy(found_path, save_path)
                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {found_path} -> {save_path}")
                return save_path
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if root.count('/') > 4:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
                dirs[:] = []  # –ù–µ —É–≥–ª—É–±–ª—è–µ–º—Å—è –¥–∞–ª—å—à–µ

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–±—É–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
        logger.warning(f"[FILE_DOWNLOAD] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–±—É–µ–º HTTP-–∑–∞–ø—Ä–æ—Å")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
        if not settings:
            from src.config.settings import get_settings
            settings = get_settings()
            logger.info(f"[FILE_DOWNLOAD] –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings.TELEGRAM_API_URL}")

        # –ë–∞–∑–æ–≤—ã–π URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
        local_api_url = settings.TELEGRAM_API_URL.rstrip("/")
        token = bot.token
        logger.info(f"[FILE_DOWNLOAD] –ò—Å–ø–æ–ª—å–∑—É–µ–º API URL: {local_api_url}")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
        urls_to_try = [
            f"{local_api_url}/file/bot{token}/{file_path}",
            f"{local_api_url}/file/bot{token}/{file_path.lstrip('/')}",
            f"{local_api_url}/file/bot{token}/voice/{os.path.basename(file_path)}",
            f"{local_api_url}/file/bot{token}/audio/{os.path.basename(file_path)}",
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π URL
            f"https://api.telegram.org/file/bot{token}/{file_path}"
        ]

        logger.info(f"[FILE_DOWNLOAD] –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ URL: {urls_to_try}")

        for url in urls_to_try:
            logger.info(f"[FILE_DOWNLOAD] –ü—Ä–æ–±—É–µ–º URL: {url}")
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as response:
                        status = response.status
                        logger.info(f"[FILE_DOWNLOAD] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç {url}: {status}")

                        if status == 200:
                            content = await response.read()
                            content_length = len(content)
                            logger.info(f"[FILE_DOWNLOAD] –ü–æ–ª—É—á–µ–Ω–æ {content_length} –±–∞–π—Ç —Å URL {url}")

                            if content_length > 100:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                                with open(save_path, "wb") as f:
                                    f.write(content)
                                logger.info(f"[FILE_DOWNLOAD] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Å URL {url} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {save_path}")
                                return save_path
                            else:
                                logger.warning(
                                    f"[FILE_DOWNLOAD] –ü–æ–ª—É—á–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({content_length} –±–∞–π—Ç) —Å URL {url}")
                        else:
                            headers = response.headers
                            body = await response.text()
                            logger.error(f"[FILE_DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å URL {url}: HTTP {status}")
                            logger.error(f"[FILE_DOWNLOAD] –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
                            logger.error(f"[FILE_DOWNLOAD] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {body[:200]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–µ–ª–∞
            except Exception as url_error:
                logger.error(f"[FILE_DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL {url}: {url_error}")

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        logger.error("[FILE_DOWNLOAD] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏—Å—å. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        with open(save_path, "wb") as f:
            f.write(b"Test file - failed to download real content")

        logger.warning(f"[FILE_DOWNLOAD] –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {save_path}")
        return save_path

    except Exception as e:
        logger.error(f"[FILE_DOWNLOAD] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            with open(save_path, "wb") as f:
                f.write(b"Test file - exception occurred during download")
            logger.warning(f"[FILE_DOWNLOAD] –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {save_path}")
            return save_path
        except Exception as file_error:
            logger.error(f"[FILE_DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞–≥–ª—É—à–∫–∏: {file_error}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")