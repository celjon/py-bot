from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional
from .callback_data import CallbackData
from .callback_types import CallbackType
import logging

logger = logging.getLogger(__name__)


class KeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def create_model_selection(models: List[Dict[str, Any]],
                               current_model: Optional[str] = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            current_model: –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        """
        logger.info(f"=== –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ú–û–î–ï–õ–ï–ô ===")
        logger.info(f"–í—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏: {len(models)}")
        logger.info(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}")

        buttons = []
        filtered_count = 0

        for model in models:
            model_id = model.get("id", "")
            model_label = model.get("label", "")
            parent_id = model.get("parent_id")
            children = model.get("children", [])

            logger.info(
                f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å: ID={model_id}, Label={model_label}, Parent={parent_id}, Children={len(children)}")

            # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (—É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ)
            if children and len(children) > 0:
                logger.info(f"–§–ò–õ–¨–¢–†: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å {model_id} (children: {len(children)})")
                filtered_count += 1
                continue

            # –°–û–ó–î–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–ï: ID –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø–ª—é—Å label –µ—Å–ª–∏ –µ—Å—Ç—å
            if model_label and model_label != model_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π label, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Label (id)"
                display_name = f"{model_label} ({model_id})"
            else:
                # –ï—Å–ª–∏ label —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ id
                display_name = model_id

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (Free/Pro)
            if ":free" in model_id and "(Free)" not in display_name:
                display_name += " [Free]"

            is_selected = model_id == current_model
            is_allowed = model.get("is_allowed", False)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = display_name
            if is_selected:
                button_text += " ‚úÖ"
            if not is_allowed:
                button_text += " üîí"

            logger.info(f"–î–û–ë–ê–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É: {button_text}")

            # –°–æ–∑–¥–∞–µ–º callback-–¥–∞–Ω–Ω—ã–µ
            if is_allowed:
                callback_data = CallbackData(
                    type=CallbackType.MODEL_SELECTION,
                    data={"id": model_id}
                ).encode()
            else:
                callback_data = CallbackData(
                    type=CallbackType.UNAVAILABLE_MODEL,
                    data={"id": model_id}
                ).encode()

            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        logger.info(f"=== –ò–¢–û–ì–û ===")
        logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_count}")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_data = CallbackData(type=CallbackType.CANCEL).encode()
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_context_keyboard(context_enabled: bool) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

        Args:
            context_enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        on_data = CallbackData(type=CallbackType.CONTEXT_ON).encode()
        off_data = CallbackData(type=CallbackType.CONTEXT_OFF).encode()
        cancel_data = CallbackData(type=CallbackType.CANCEL).encode()

        buttons = [
            [InlineKeyboardButton(
                text=f"–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if context_enabled else ''}",
                callback_data=on_data
            )],
            [InlineKeyboardButton(
                text=f"–ù–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if not context_enabled else ''}",
                callback_data=off_data
            )],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)