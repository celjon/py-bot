# src/delivery/telegram/services/keyboard_factory.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional
from .callback_data import CallbackData
from .callback_types import CallbackType


class KeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def create_model_selection(models: List[Dict[str, Any]],
                               current_model: Optional[str] = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            current_model: –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        """
        buttons = []

        for model in models:
            model_id = model.get("id", "")
            model_name = model.get("label") or model_id
            is_selected = model_id == current_model
            is_allowed = model.get("is_allowed", False)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"{model_name}"
            if is_selected:
                button_text += " ‚úÖ"
            if not is_allowed:
                button_text += " üîí"

            # –°–æ–∑–¥–∞–µ–º callback-–¥–∞–Ω–Ω—ã–µ
            if is_allowed:
                callback_data = CallbackData(
                    type=CallbackType.MODEL_SELECTION,
                    data={"id": model_id}
                ).encode()
            else:
                callback_data = CallbackData(
                    type=CallbackType.UNAVAILABLE_MODEL,
                    data={"id": model_id}
                ).encode()

            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_data = CallbackData(type=CallbackType.CANCEL).encode()
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_context_keyboard(context_enabled: bool) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

        Args:
            context_enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        on_data = CallbackData(type=CallbackType.CONTEXT_ON).encode()
        off_data = CallbackData(type=CallbackType.CONTEXT_OFF).encode()
        cancel_data = CallbackData(type=CallbackType.CANCEL).encode()

        buttons = [
            [InlineKeyboardButton(
                text=f"–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if context_enabled else ''}",
                callback_data=on_data
            )],
            [InlineKeyboardButton(
                text=f"–ù–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç {'‚úÖ' if not context_enabled else ''}",
                callback_data=off_data
            )],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)