# src/delivery/telegram/handlers.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.chat_action import ChatAction
from src.domain.service.intent_detection import IntentDetectionService, IntentType
from src.domain.usecase.chat_session import ChatSessionUseCase
from src.domain.usecase.account_connection import AccountConnectionUseCase
from src.domain.usecase.image_generation import ImageGenerationUseCase
from src.domain.usecase.web_search import WebSearchUseCase
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.chat_repository import ChatRepository
import logging
import json
from typing import List, Optional, Dict, Any

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è aiogram
dp = Router()


def create_handlers(
        chat_session_usecase: ChatSessionUseCase,
        account_connection_usecase: AccountConnectionUseCase,
        image_generation_usecase: ImageGenerationUseCase,
        web_search_usecase: WebSearchUseCase,
        intent_detection_service: IntentDetectionService,
        user_repository: UserRepository,
        chat_repository: ChatRepository
):
    """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

    async def get_or_create_user(message: Message) -> User:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        telegram_id = str(message.from_user.id)
        user = await user_repository.find_by_telegram_id(telegram_id)

        if not user:
            user = User(
                id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                telegram_id=telegram_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                username=message.from_user.username,
                language_code=message.from_user.language_code,
                current_chat_index=1
            )
            user_id = await user_repository.save(user)
            user.id = user_id

        return user

    async def get_or_create_chat(user: User) -> Chat:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat = await chat_repository.find_by_user_id_and_chat_index(
            user.id,
            user.current_chat_index
        )

        if not chat:
            chat = Chat(
                id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                user_id=user.id,
                chat_index=user.current_chat_index
            )
            chat_id = await chat_repository.save(chat)
            chat.id = chat_id

        return chat

    async def send_long_message(message: Message, content: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        if len(content) <= 3900:  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —É—á–µ—Ç–∞ Markdown
            await message.answer(content, parse_mode="Markdown")
            return

        parts = []
        while content:
            if len(content) <= 3900:
                parts.append(content)
                content = ""
            else:
                last_newline = content[:3900].rfind("\n")
                if last_newline == -1:
                    last_newline = 3900
                parts.append(content[:last_newline])
                content = content[last_newline:]

        for part in parts:
            await message.answer(part, parse_mode="Markdown")

    def get_chat_model_inline_keyboard(models: List[Dict], current_model: Optional[str] = None) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞"""
        buttons = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        text_models = [model for model in models if "TEXT_TO_TEXT" in model.get("features", [])]

        for model in text_models:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            is_selected = model.get("id") == current_model
            text = f"{model_name} {'‚úÖ' if is_selected else ''}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            is_allowed = model.get("is_allowed", False)
            if not is_allowed:
                text += " üîí"

            callback_data = json.dumps({
                "action": "select_chat_model",
                "model_id": model.get("id"),
                "allowed": is_allowed
            })

            buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"action": "cancel"}))])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def get_image_model_inline_keyboard(models: List[Dict],
                                        current_model: Optional[str] = None) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        buttons = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_models = [model for model in models if "TEXT_TO_IMAGE" in model.get("features", [])]

        for model in image_models:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            is_selected = model.get("id") == current_model
            text = f"{model_name} {'‚úÖ' if is_selected else ''}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            is_allowed = model.get("is_allowed", False)
            if not is_allowed:
                text += " üîí"

            callback_data = json.dumps({
                "action": "select_image_model",
                "model_id": model.get("id"),
                "allowed": is_allowed
            })

            buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"action": "cancel"}))])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def get_web_search_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
        buttons = [
            [InlineKeyboardButton(
                text=f"üîç –í–µ–±-–ø–æ–∏—Å–∫ {'‚úÖ' if enabled else '‚ùå'}",
                callback_data=json.dumps({"action": "toggle_web_search"})
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=json.dumps({"action": "cancel"})
            )]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def get_context_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        buttons = [
            [InlineKeyboardButton(
                text=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω {'‚úÖ' if enabled else ''}",
                callback_data=json.dumps({"action": "context_on"})
            )],
            [InlineKeyboardButton(
                text=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω {'‚úÖ' if not enabled else ''}",
                callback_data=json.dumps({"action": "context_off"})
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=json.dumps({"action": "cancel"})
            )]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

    @dp.message(Command("start"))
    async def handle_start_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = await get_or_create_user(message)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            if message.text and len(message.text.split()) > 1:
                user.referral_code = message.text.split()[1]
                await user_repository.update(user)

            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø BotHub, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
                "‚ú® –Ø –º–æ–≥—É:\n"
                "üìù –û–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
                "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
                "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ!\n\n"
                "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                "/gpt_config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n"
                "/image_generation_config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                "/context - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
                "/web_search - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
                parse_mode="Markdown"
            )

    @dp.message(Command("reset"))
    async def handle_reset_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ BotHub
            await chat_session_usecase.reset_context(user, chat)
            await chat_repository.update(chat)

            await message.answer(
                "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )

    @dp.message(Command("link_account"))
    async def handle_link_account_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link_account –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            user = await get_or_create_user(message)

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å email, –∑–Ω–∞—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
            if user.email:
                await message.answer(
                    "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É BotHub.",
                    parse_mode="Markdown"
                )
                return

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                link = await account_connection_usecase.generate_connection_link(user)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π, –∏–∑–±–µ–≥–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Markdown
                await message.answer(
                    f"–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É BotHub, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{link}\n\n"
                    f"–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ BotHub.",
                    parse_mode=None
                )
            except Exception as link_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {link_error}", exc_info=True)
                await message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏. \n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n"
                    f"1) –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ bothub.chat\n"
                    f"2) –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    f"3) –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã'\n"
                    f"4) –î–æ–±–∞–≤—å—Ç–µ Telegram –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã link_account: {e}", exc_info=True)
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    @dp.message(Command("gpt_config"))
    async def handle_gpt_config_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gpt_config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            access_token = await chat_session_usecase.gateway.get_access_token(user)
            models = await chat_session_usecase.gateway.client.list_models(access_token)

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
                parse_mode="Markdown",
                reply_markup=get_chat_model_inline_keyboard(models, chat.bothub_chat_model)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã gpt_config: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    @dp.message(Command("image_generation_config"))
    async def handle_image_generation_config_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /image_generation_config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            access_token = await chat_session_usecase.gateway.get_access_token(user)
            models = await chat_session_usecase.gateway.client.list_models(access_token)

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
                parse_mode="Markdown",
                reply_markup=get_image_model_inline_keyboard(models, user.image_generation_model)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã image_generation_config: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    @dp.message(Command("context"))
    async def handle_context_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /context –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:\n\n"
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ. "
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
                parse_mode="Markdown",
                reply_markup=get_context_inline_keyboard(chat.context_remember)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã context: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    @dp.message(Command("web_search"))
    async def handle_web_search_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /web_search –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
        try:
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±-–ø–æ–∏—Å–∫–∞
            web_search_enabled = await web_search_usecase.gateway.get_web_search(user, chat)

            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º:\n\n"
                "–í–µ–±-–ø–æ–∏—Å–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                parse_mode="Markdown",
                reply_markup=get_web_search_inline_keyboard(web_search_enabled)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã web_search: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    @dp.message(Command("help"))
    async def handle_help_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        try:
            await message.answer(
                "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*\n\n"
                "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                "/reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                "/link_account - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É BotHub\n"
                "/gpt_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
                "/image_generation_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                "/context - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
                "/web_search - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                "/help - –í—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é "
                "–≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (—á–∞—Ç, –ø–æ–∏—Å–∫ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–≠–ö–û–í ====================

    @dp.callback_query()
    async def handle_callback_query(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            user = await get_or_create_user(callback.message)
            chat = await get_or_create_chat(user)

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
            try:
                data = json.loads(callback.data)
                action = data.get("action")
            except:
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            if action == "cancel":
                # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–≤–µ—á–∞–µ–º
                await callback.message.delete_reply_markup()
                await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

            elif action == "select_chat_model":
                model_id = data.get("model_id")
                is_allowed = data.get("allowed", False)

                if not is_allowed:
                    await callback.answer("–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                user.gpt_model = model_id
                chat.bothub_chat_model = model_id
                chat.reset_context_counter()

                await user_repository.update(user)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
                await chat_session_usecase.gateway.create_new_chat(user, chat)
                await chat_repository.update(chat)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.delete_reply_markup()
                await callback.answer(f"–ú–æ–¥–µ–ª—å {model_id} –≤—ã–±—Ä–∞–Ω–∞")
                await callback.message.answer(
                    f"‚úÖ –ú–æ–¥–µ–ª—å *{model_id}* —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –∏ –Ω–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω.",
                    parse_mode="Markdown"
                )

            elif action == "select_image_model":
                model_id = data.get("model_id")
                is_allowed = data.get("allowed", False)

                if not is_allowed:
                    await callback.answer("–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                user.image_generation_model = model_id
                await user_repository.update(user)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.delete_reply_markup()
                await callback.answer(f"–ú–æ–¥–µ–ª—å {model_id} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                await callback.message.answer(
                    f"‚úÖ –ú–æ–¥–µ–ª—å *{model_id}* —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
                    parse_mode="Markdown"
                )

            elif action == "toggle_web_search":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ
                current_status = await web_search_usecase.gateway.get_web_search(user, chat)
                new_status = not current_status

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                await web_search_usecase.toggle_web_search(user, chat, new_status)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_reply_markup(
                    reply_markup=get_web_search_inline_keyboard(new_status)
                )

                status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
                await callback.answer(f"–í–µ–±-–ø–æ–∏—Å–∫ {status_text}")

            elif action == "context_on":
                # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chat.context_remember = True
                chat.reset_context_counter()
                await chat_repository.update(chat)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                await chat_session_usecase.gateway.create_new_chat(user, chat)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.delete_reply_markup()
                await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω")
                await callback.message.answer(
                    "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    parse_mode="Markdown"
                )

            elif action == "context_off":
                # –í—ã–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chat.context_remember = False
                chat.reset_context_counter()
                await chat_repository.update(chat)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                await chat_session_usecase.gateway.create_new_chat(user, chat)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.delete_reply_markup()
                await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω")
                await callback.message.answer(
                    "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    parse_mode="Markdown"
                )

            elif action == "MJ_BUTTON":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ Midjourney
                button_id = data.get("id")

                if not button_id:
                    await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–Ω–æ–ø–∫–∏")
                    return

                # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å Midjourney...")
                await callback.message.answer("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤—ã–±–æ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ Midjourney
                try:
                    # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π usecase –¥–ª—è –∫–Ω–æ–ø–æ–∫ Midjourney
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
                    result = await image_generation_usecase.generate_image(
                        user,
                        chat,
                        f"–ü—Ä–∏–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ Midjourney (button_id: {button_id})"
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if "attachments" in result.get("response", {}):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        for attachment in result["response"]["attachments"]:
                            if attachment.get("file", {}).get("type") == "IMAGE":
                                image_url = attachment["file"].get("url", "")
                                if not image_url and "path" in attachment["file"]:
                                    image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                                if image_url:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ Midjourney
                                    inline_markup = None
                                    if attachment.get("buttons") and any(
                                            btn.get("type") == "MJ_BUTTON" for btn in attachment["buttons"]):
                                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Midjourney
                                        mj_buttons = []
                                        for btn in attachment["buttons"]:
                                            if btn.get("type") == "MJ_BUTTON":
                                                mj_buttons.append(
                                                    InlineKeyboardButton(
                                                        text=btn.get("mj_native_label", "–î–µ–π—Å—Ç–≤–∏–µ"),
                                                        callback_data=json.dumps({
                                                            "action": "MJ_BUTTON",
                                                            "id": btn.get("id")
                                                        })
                                                    )
                                                )

                                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                        if mj_buttons:
                                            inline_markup = InlineKeyboardMarkup(inline_keyboard=[mj_buttons])

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑
                                    await callback.message.answer_photo(
                                        photo=image_url,
                                        caption=result.get("response", {}).get("content", ""),
                                        reply_markup=inline_markup
                                    )
                    else:
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        content = result.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É")
                        await callback.message.answer(content, parse_mode="Markdown")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ Midjourney: {e}", exc_info=True)
                    await callback.message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ Midjourney. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="Markdown"
                    )

            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –° –£–ú–ù–´–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –ù–ê–ú–ï–†–ï–ù–ò–ô ====================

    @dp.message(F.text)
    async def handle_text_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.chat.do(ChatAction.TYPING)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent, intent_data = intent_detection_service.detect_intent(
                message.text,
                str(user.id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                None  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent_detection_service.update_user_context(str(user.id), intent, intent_data)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            if intent == IntentType.WEB_SEARCH:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                await message.answer(
                    f"üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:* {intent_data.get('query')}",
                    parse_mode="Markdown"
                )

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–±-–ø–æ–∏—Å–∫
                response = await web_search_usecase.search(
                    user,
                    chat,
                    intent_data.get("query", message.text),
                    None  # –ü–æ–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                await send_long_message(message, content)

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if "tokens" in response:
                    caps_text = f"üëæ -{response['tokens']} caps"
                    await message.answer(caps_text)

            elif intent == IntentType.IMAGE_GENERATION:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await message.answer(
                    f"üé® *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* {intent_data.get('prompt')}",
                    parse_mode="Markdown"
                )

                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è
                await message.chat.do(ChatAction.UPLOAD_PHOTO)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                response = await image_generation_usecase.generate_image(
                    user,
                    chat,
                    intent_data.get("prompt", message.text),
                    None  # –ü–æ–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if "attachments" in response.get("response", {}):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    for attachment in response["response"]["attachments"]:
                        if attachment.get("file", {}).get("type") == "IMAGE":
                            image_url = attachment["file"].get("url", "")
                            if not image_url and "path" in attachment["file"]:
                                image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                            if image_url:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ Midjourney
                                inline_markup = None
                                if attachment.get("buttons") and any(
                                        btn.get("type") == "MJ_BUTTON" for btn in attachment["buttons"]):
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Midjourney
                                    mj_buttons = []
                                    for btn in attachment["buttons"]:
                                        if btn.get("type") == "MJ_BUTTON":
                                            mj_buttons.append(
                                                InlineKeyboardButton(
                                                    text=btn.get("mj_native_label", "–î–µ–π—Å—Ç–≤–∏–µ"),
                                                    callback_data=json.dumps({
                                                        "action": "MJ_BUTTON",
                                                        "id": btn.get("id")
                                                    })
                                                )
                                            )

                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                    if mj_buttons:
                                        inline_markup = InlineKeyboardMarkup(inline_keyboard=[mj_buttons])

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑
                                await message.answer_photo(
                                    photo=image_url,
                                    caption=response.get("response", {}).get("content", ""),
                                    reply_markup=inline_markup
                                )
                else:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    await message.answer(content, parse_mode="Markdown")

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if "tokens" in response:
                    caps_text = f"üëæ -{response['tokens']} caps"
                    await message.answer(caps_text)

            else:  # IntentType.CHAT - –æ–±—ã—á–Ω—ã–π —á–∞—Ç
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                response = await chat_session_usecase.send_message(
                    user,
                    chat,
                    message.text,
                    None  # –ü–æ–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                await send_long_message(message, content)

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if "tokens" in response:
                    caps_text = f"üëæ -{response['tokens']} caps"
                    if chat.context_remember:
                        caps_text += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {chat.context_counter} —Å–æ–æ–±—â–µ–Ω–∏–π"
                        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if chat.context_counter > 0 and chat.context_counter % 10 == 0:
                            caps_text += "\n‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /reset"

                    await message.answer(caps_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await user_repository.update(user)
            await chat_repository.update(chat)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

    @dp.message(F.voice | F.audio)
    async def handle_voice_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.chat.do(ChatAction.TYPING)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file_id = message.voice.file_id if message.voice else message.audio.file_id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            await message.answer(
                "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                parse_mode="Markdown"
            )

            try:
                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
                file_url = await message.bot.get_file_url(file_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ BotHub –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
                transcribed_text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ API BotHub."

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                intent, intent_data = intent_detection_service.detect_intent(
                    transcribed_text,
                    str(user.id),
                    None
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                intent_detection_service.update_user_context(str(user.id), intent, intent_data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                await message.answer(
                    f"üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:* {transcribed_text}",
                    parse_mode="Markdown"
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if intent == IntentType.WEB_SEARCH:
                    await message.answer(
                        f"üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:* {intent_data.get('query')}",
                        parse_mode="Markdown"
                    )

                    response = await web_search_usecase.search(
                        user,
                        chat,
                        intent_data.get("query", transcribed_text),
                        None
                    )

                    content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    await send_long_message(message, content)

                elif intent == IntentType.IMAGE_GENERATION:
                    await message.answer(
                        f"üé® *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* {intent_data.get('prompt')}",
                        parse_mode="Markdown"
                    )

                    await message.chat.do(ChatAction.UPLOAD_PHOTO)

                    response = await image_generation_usecase.generate_image(
                        user,
                        chat,
                        intent_data.get("prompt", transcribed_text),
                        None
                    )

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
                    if "attachments" in response.get("response", {}):
                        for attachment in response["response"]["attachments"]:
                            if attachment.get("file", {}).get("type") == "IMAGE":
                                image_url = attachment["file"].get("url", "")
                                if not image_url and "path" in attachment["file"]:
                                    image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                                if image_url:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ Midjourney
                                    inline_markup = None
                                    if attachment.get("buttons") and any(
                                            btn.get("type") == "MJ_BUTTON" for btn in attachment["buttons"]):
                                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Midjourney
                                        mj_buttons = []
                                        for btn in attachment["buttons"]:
                                            if btn.get("type") == "MJ_BUTTON":
                                                mj_buttons.append(
                                                    InlineKeyboardButton(
                                                        text=btn.get("mj_native_label", "–î–µ–π—Å—Ç–≤–∏–µ"),
                                                        callback_data=json.dumps({
                                                            "action": "MJ_BUTTON",
                                                            "id": btn.get("id")
                                                        })
                                                    )
                                                )

                                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                        if mj_buttons:
                                            inline_markup = InlineKeyboardMarkup(inline_keyboard=[mj_buttons])

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑
                                    await message.answer_photo(
                                        photo=image_url,
                                        caption=response.get("response", {}).get("content", ""),
                                        reply_markup=inline_markup
                                    )
                    else:
                        content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        await message.answer(content, parse_mode="Markdown")

                else:  # IntentType.CHAT
                    response = await chat_session_usecase.send_message(
                        user,
                        chat,
                        transcribed_text,
                        None
                    )

                    content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                    await send_long_message(message, content)

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if "tokens" in response:
                    caps_text = f"üëæ -{response['tokens']} caps"
                    await message.answer(caps_text)

            except Exception as voice_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_error}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    parse_mode="Markdown"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await user_repository.update(user)
            await chat_repository.update(chat)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ====================

    @dp.message(F.photo | F.document)
    async def handle_photo_document(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.chat.do(ChatAction.TYPING)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            file_id = None
            caption = message.caption or ""

            if message.photo:
                # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
                file_id = message.photo[-1].file_id
            elif message.document:
                file_id = message.document.file_id

            if not file_id:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="Markdown"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
            file_url = await message.bot.get_file_url(file_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–ø–∏—Å–∏
            if caption:
                intent, intent_data = intent_detection_service.detect_intent(
                    caption,
                    str(user.id),
                    None
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                intent_detection_service.update_user_context(str(user.id), intent, intent_data)

                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if intent == IntentType.WEB_SEARCH:
                    await message.answer(
                        f"üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –∑–∞–ø—Ä–æ—Å—É:* {intent_data.get('query')}",
                        parse_mode="Markdown"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ BotHub –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –∑–∞–ø—Ä–æ—Å—É
                    response = await web_search_usecase.search(
                        user,
                        chat,
                        intent_data.get("query", caption),
                        [file_url]  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Ñ–∞–π–ª–∞
                    )

                    content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    await send_long_message(message, content)

                elif intent == IntentType.IMAGE_GENERATION:
                    await message.answer(
                        f"üé® *–†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* {intent_data.get('prompt')}",
                        parse_mode="Markdown"
                    )

                    await message.chat.do(ChatAction.UPLOAD_PHOTO)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ BotHub –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    response = await image_generation_usecase.generate_image(
                        user,
                        chat,
                        intent_data.get("prompt", caption),
                        [file_url]  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Ñ–∞–π–ª–∞
                    )

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                    if "attachments" in response.get("response", {}):
                        for attachment in response["response"]["attachments"]:
                            if attachment.get("file", {}).get("type") == "IMAGE":
                                image_url = attachment["file"].get("url", "")
                                if not image_url and "path" in attachment["file"]:
                                    image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                                if image_url:
                                    await message.answer_photo(
                                        photo=image_url,
                                        caption=response.get("response", {}).get("content", "")
                                    )
                    else:
                        content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        await message.answer(content, parse_mode="Markdown")

                else:  # IntentType.CHAT
                    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
                    response = await chat_session_usecase.send_message(
                        user,
                        chat,
                        caption,
                        [file_url]  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Ñ–∞–π–ª–∞
                    )

                    content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                    await send_long_message(message, content)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏, –ø—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await message.answer(
                    "üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*",
                    parse_mode="Markdown"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                response = await chat_session_usecase.send_message(
                    user,
                    chat,
                    "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ",  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    [file_url]  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Ñ–∞–π–ª–∞
                )

                content = response.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                await send_long_message(message, content)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if "tokens" in response:
                caps_text = f"üëæ -{response['tokens']} caps"
                await message.answer(caps_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await user_repository.update(user)
            await chat_repository.update(chat)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                parse_mode="Markdown"
            )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è aiogram
    return dp