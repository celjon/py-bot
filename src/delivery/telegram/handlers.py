from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums.chat_action import ChatAction
from src.domain.service.intent_detection import IntentDetectionService, IntentType
from src.domain.usecase.chat_session import ChatSessionUseCase
from src.domain.usecase.web_search import WebSearchUseCase
from src.domain.usecase.image_generation import ImageGenerationUseCase
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.chat_repository import ChatRepository
import logging
import re

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è aiogram
dp = Router()


def create_handlers(
        chat_session_usecase: ChatSessionUseCase,
        web_search_usecase: WebSearchUseCase,
        image_generation_usecase: ImageGenerationUseCase,
        intent_detection_service: IntentDetectionService,
        user_repository: UserRepository,
        chat_repository: ChatRepository
):
    """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

    async def get_or_create_user(message: Message) -> User:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        telegram_id = str(message.from_user.id)
        user = await user_repository.find_by_telegram_id(telegram_id)

        if not user:
            user = User(
                id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                telegram_id=telegram_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                username=message.from_user.username,
                language_code=message.from_user.language_code,
                current_chat_index=1
            )
            user_id = await user_repository.save(user)
            user.id = user_id

        return user

    async def get_or_create_chat(user: User) -> Chat:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat = await chat_repository.find_by_user_id_and_chat_index(
            user.id,
            user.current_chat_index
        )

        if not chat:
            chat = Chat(
                id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                user_id=user.id,
                chat_index=user.current_chat_index
            )
            chat_id = await chat_repository.save(chat)
            chat.id = chat_id

        return chat

    async def send_long_message(message: Message, content: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        if len(content) <= 3900:  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —É—á–µ—Ç–∞ Markdown
            await message.answer(content, parse_mode="Markdown")
            return

        parts = []
        while content:
            if len(content) <= 3900:
                parts.append(content)
                content = ""
            else:
                last_newline = content[:3900].rfind("\n")
                if last_newline == -1:
                    last_newline = 3900
                parts.append(content[:last_newline])
                content = content[last_newline:]

        for part in parts:
            await message.answer(part, parse_mode="Markdown")

    @dp.message(Command("start"))
    async def handle_start_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = await get_or_create_user(message)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if message.text and len(message.text.split()) > 1:
            user.referral_code = message.text.split()[1]
            await user_repository.update(user)

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø BotHub, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
            "‚ú® –Ø –º–æ–≥—É:\n"
            "üìù –û–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ!\n\n"
            "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
            "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
            parse_mode="Markdown"
        )

    @dp.message(Command("reset"))
    async def handle_reset_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user = await get_or_create_user(message)
        chat = await get_or_create_chat(user)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ BotHub
        await chat_session_usecase.reset_context(user, chat)
        await chat_repository.update(chat)

        await message.answer(
            "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )

    @dp.message(Command("help"))
    async def handle_help_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.answer(
            "üîç **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1. **–î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è** –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "   –ù–∞–ø—Ä–∏–º–µ—Ä: *\"–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ\"*\n\n"
            "2. **–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞: –Ω–∞–π–¥–∏, –ø–æ–∏—â–∏, –∑–∞–≥—É–≥–ª–∏\n"
            "   –ù–∞–ø—Ä–∏–º–µ—Ä: *\"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö\"*\n\n"
            "3. **–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞: –Ω–∞—Ä–∏—Å—É–π, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π, —Å–æ–∑–¥–∞–π\n"
            "   –ù–∞–ø—Ä–∏–º–µ—Ä: *\"–ù–∞—Ä–∏—Å—É–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º\"*\n\n"
            "üìã **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
            "/help - –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
            parse_mode="Markdown"
        )

    @dp.message(F.text)
    async def handle_text_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.chat.do(ChatAction.TYPING)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent_type, intent_data = intent_detection_service.detect_intent(message.text)
            logger.info(f"Detected intent: {intent_type.value} for message: {message.text[:50]}...")

            if intent_type == IntentType.CHAT:
                # –û–±—ã—á–Ω—ã–π —á–∞—Ç —Å –ò–ò
                await message.chat.do(ChatAction.TYPING)
                try:
                    response = await chat_session_usecase.send_message(
                        user,
                        chat,
                        message.text,
                        None  # TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤
                    )

                    content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—É–ª (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
                    if chat.formula_to_image:
                        # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª
                        pass

                    await send_long_message(message, content)

                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–∞–ø—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    if "tokens" in response:
                        caps_text = f"üëæ -{response['tokens']} caps"
                        await message.answer(caps_text)

                except Exception as e:
                    logger.error(f"Error in chat session: {e}", exc_info=True)
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç–∞: {str(e)}",
                        parse_mode="Markdown"
                    )

            elif intent_type == IntentType.WEB_SEARCH:
                # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
                await message.answer(
                    "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...",
                    parse_mode="Markdown"
                )
                await message.chat.do(ChatAction.TYPING)

                try:
                    response = await web_search_usecase.search(
                        user,
                        chat,
                        intent_data.get("query", message.text),
                        None  # TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤
                    )

                    content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    await send_long_message(message, content)

                except Exception as e:
                    logger.error(f"Error in web search: {e}", exc_info=True)
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {str(e)}",
                        parse_mode="Markdown"
                    )

            elif intent_type == IntentType.IMAGE_GENERATION:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await message.answer(
                    "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                    parse_mode="Markdown"
                )

                try:
                    prompt = intent_data.get("prompt", message.text)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç —ç—Ç–æ)
                    if not re.search(r'[a-zA-Z]', prompt):
                        await message.answer(
                            "‚ÑπÔ∏è –î–æ–±–∞–≤–ª—è—é –≤ –∑–∞–ø—Ä–æ—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...",
                            parse_mode="Markdown"
                        )
                        prompt += "\n\nTranslate the above to English"

                    response = await image_generation_usecase.generate_image(
                        user,
                        chat,
                        prompt,
                        None  # TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤
                    )

                    attachments = response.get("response", {}).get("attachments", [])
                    if attachments:
                        for attachment in attachments:
                            if attachment.get("file", {}).get("type") == "IMAGE":
                                url = attachment.get("file", {}).get("url")
                                if not url and attachment.get("file", {}).get("path"):
                                    url = f"https://storage.bothub.chat/bothub-storage/{attachment.get('file', {}).get('path')}"

                                if url:
                                    await message.answer_photo(url)

                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                                    buttons = attachment.get("buttons", [])
                                    mj_buttons = [b for b in buttons if b.get("type") == "MJ_BUTTON"]
                                    if mj_buttons:
                                        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ Midjourney
                                        pass
                                else:
                                    await message.answer(
                                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                        parse_mode="Markdown"
                                    )
                    else:
                        await message.answer(
                            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                            parse_mode="Markdown"
                        )

                except Exception as e:
                    logger.error(f"Error in image generation: {e}", exc_info=True)
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}",
                        parse_mode="Markdown"
                    )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await user_repository.update(user)
            await chat_repository.update(chat)

        except Exception as e:
            logger.error(f"Error processing message: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="Markdown"
            )

    @dp.message(F.voice)
    async def handle_voice_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ
            await message.chat.do(ChatAction.RECORD_VOICE)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file_id = message.voice.file_id
            file = await message.bot.get_file(file_id)
            file_path = file.file_path

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not message.bot.token:
                logger.error("Bot token is missing")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode="Markdown")
                return

            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

            await message.answer(
                "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                parse_mode="Markdown"
            )

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                transcribed_text = await chat_session_usecase.transcribe_voice(user, chat, file_url)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                await message.answer(
                    f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{transcribed_text}",
                    parse_mode="Markdown"
                )

                # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è—è –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
                intent_type, intent_data = intent_detection_service.detect_intent(transcribed_text)

                await message.chat.do(ChatAction.TYPING)

                if intent_type == IntentType.CHAT:
                    response = await chat_session_usecase.send_message(user, chat, transcribed_text)
                    content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    await send_long_message(message, content)

                elif intent_type == IntentType.WEB_SEARCH:
                    await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...", parse_mode="Markdown")
                    response = await web_search_usecase.search(user, chat, intent_data.get("query", transcribed_text))
                    content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    await send_long_message(message, content)

                elif intent_type == IntentType.IMAGE_GENERATION:
                    await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", parse_mode="Markdown")
                    response = await image_generation_usecase.generate_image(user, chat, intent_data.get("prompt",
                                                                                                         transcribed_text))

                    attachments = response.get("response", {}).get("attachments", [])
                    if attachments:
                        for attachment in attachments:
                            if attachment.get("file", {}).get("type") == "IMAGE":
                                url = attachment.get("file", {}).get("url")
                                if not url and attachment.get("file", {}).get("path"):
                                    url = f"https://storage.bothub.chat/bothub-storage/{attachment.get('file', {}).get('path')}"

                                if url:
                                    await message.answer_photo(url)
                                else:
                                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", parse_mode="Markdown")
                    else:
                        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", parse_mode="Markdown")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await user_repository.update(user)
                await chat_repository.update(chat)

            except Exception as e:
                logger.error(f"Error transcribing voice message: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error processing voice message: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="Markdown"
            )

    @dp.message(F.photo)
    async def handle_photo_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ
            await message.chat.do(ChatAction.UPLOAD_PHOTO)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = message.photo[-1]
            file_id = photo.file_id
            file = await message.bot.get_file(file_id)
            file_path = file.file_path

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not message.bot.token:
                logger.error("Bot token is missing")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode="Markdown")
                return

            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = message.caption or "–û–ø–∏—à–∏ —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"

            await message.answer(
                "üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                parse_mode="Markdown"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            try:
                await message.chat.do(ChatAction.TYPING)
                response = await chat_session_usecase.send_message(user, chat, caption, [file_url])

                content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                await send_long_message(message, content)

                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                attachments = response.get("response", {}).get("attachments", [])
                if attachments:
                    for attachment in attachments:
                        if attachment.get("file", {}).get("type") == "IMAGE":
                            url = attachment.get("file", {}).get("url")
                            if not url and attachment.get("file", {}).get("path"):
                                url = f"https://storage.bothub.chat/bothub-storage/{attachment.get('file', {}).get('path')}"

                            if url:
                                await message.answer_photo(url)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await user_repository.update(user)
                await chat_repository.update(chat)

            except Exception as e:
                logger.error(f"Error processing photo: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error processing photo message: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                parse_mode="Markdown"
            )

    @dp.message(F.document)
    async def handle_document_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
            await message.chat.do(ChatAction.UPLOAD_DOCUMENT)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            user = await get_or_create_user(message)
            chat = await get_or_create_chat(user)

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = message.document
            file_id = document.file_id
            file_name = document.file_name
            mime_type = document.mime_type

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            supported_mime_types = [
                'text/plain', 'text/html', 'text/csv', 'text/markdown',
                'application/pdf', 'application/json',
                'image/jpeg', 'image/png', 'image/gif', 'image/webp'
            ]

            if mime_type not in supported_mime_types:
                await message.answer(
                    f"‚ö†Ô∏è –¢–∏–ø —Ñ–∞–π–ª–∞ {mime_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    parse_mode="Markdown"
                )
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await message.bot.get_file(file_id)
            file_path = file.file_path

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not message.bot.token:
                logger.error("Bot token is missing")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode="Markdown")
                return

            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = message.caption or f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ {file_name}"

            await message.answer(
                f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç {file_name}...",
                parse_mode="Markdown"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            try:
                await message.chat.do(ChatAction.TYPING)
                response = await chat_session_usecase.send_message(user, chat, caption, [file_url])

                content = response.get("response", {}).get("content", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
                await send_long_message(message, content)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await user_repository.update(user)
                await chat_repository.update(chat)

            except Exception as e:
                logger.error(f"Error processing document: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error processing document message: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                parse_mode="Markdown"
            )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è aiogram
    return dp