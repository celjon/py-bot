# src/delivery/telegram/handlers.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums.chat_action import ChatAction
from src.domain.service.intent_detection import IntentDetectionService, IntentType
from src.domain.usecase.chat_session import ChatSessionUseCase
from src.domain.usecase.account_connection import AccountConnectionUseCase
from src.domain.usecase.image_generation import ImageGenerationUseCase
from src.domain.usecase.web_search import WebSearchUseCase
from src.domain.usecase.system_prompt import SystemPromptUseCase
from src.domain.usecase.present import PresentUseCase
from src.domain.usecase.referral import ReferralUseCase
from src.domain.usecase.model_selection import ModelSelectionUseCase
from src.domain.usecase.buffer_message import BufferMessageUseCase
from src.domain.service.chat_service import ChatService
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.chat_repository import ChatRepository
from src.adapter.repository.present_repository import PresentRepository
import logging
import json
from typing import List, Optional, Dict, Any, Tuple

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è aiogram
#dp = Router()


def create_handlers(
        chat_session_usecase: ChatSessionUseCase,
        account_connection_usecase: AccountConnectionUseCase,
        intent_detection_service: IntentDetectionService,
        user_repository: UserRepository,
        chat_repository: ChatRepository,
        present_repository: PresentRepository = None,
        image_generation_usecase: Optional[ImageGenerationUseCase] = None,
        web_search_usecase: Optional[WebSearchUseCase] = None,
        system_prompt_usecase: Optional[SystemPromptUseCase] = None,
        present_usecase: Optional[PresentUseCase] = None,
        referral_usecase: Optional[ReferralUseCase] = None,
        model_selection_usecase: Optional[ModelSelectionUseCase] = None,
        buffer_message_usecase: Optional[BufferMessageUseCase] = None,
        chat_service: Optional[ChatService] = None
):
    logger.info("Starting create_handlers")
    router = Router()
    logger.info("Router created"
    """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram""")

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
    try:
        @router.message(Command("debug"))
        async def cmd_debug(message: Message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug –æ—Ç {message.from_user.id}")
            await message.answer("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

        @router.message(Command("test"))
        async def cmd_test(message: Message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç {message.from_user.id}")
            await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @router.message(F.text)
        async def handle_all_text(message: Message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")
            await message.answer(f"–≠—Ö–æ: {message.text}")

        async def get_or_create_user(message: Message) -> User:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
            telegram_id = str(message.from_user.id)
            user = await user_repository.find_by_telegram_id(telegram_id)

            if not user:
                user = User(
                    id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    telegram_id=telegram_id,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    username=message.from_user.username,
                    language_code=message.from_user.language_code,
                    current_chat_index=1,
                    current_chat_list_page=1
                )
                user_id = await user_repository.save(user)
                user.id = user_id

            return user

        async def get_or_create_chat(user: User) -> Chat:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            chat = await chat_repository.find_by_user_id_and_chat_index(user.id, user.current_chat_index)

            if not chat:
                chat = Chat(
                    id=0,
                    user_id=user.id,
                    chat_index=user.current_chat_index,
                    context_remember=True,
                    context_counter=0,
                    links_parse=False,
                    formula_to_image=False,
                    answer_to_voice=False
                )

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—è—Ç–æ–≥–æ —á–∞—Ç–∞ (üìù)
                if user.current_chat_index == 5:
                    chat.context_remember = False
                    chat.system_prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã."

                chat_id = await chat_repository.save(chat)
                chat.id = chat_id

            return chat

        async def send_long_message(message: Message, content: str, parse_mode: str = "Markdown"):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
            max_length = 3900 if parse_mode == "Markdown" else 4096

            if len(content) <= max_length:
                await message.answer(content, parse_mode=parse_mode)
                return

            parts = []
            while content:
                if len(content) <= max_length:
                    parts.append(content)
                    content = ""
                else:
                    last_newline = content[:max_length].rfind("\n")
                    if last_newline == -1:
                        last_newline = max_length
                    parts.append(content[:last_newline])
                    content = content[last_newline:]

            for part in parts:
                await message.answer(part, parse_mode=parse_mode)

        # ==================== –ì–ï–ù–ï–†–ê–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–† ====================

        def get_main_keyboard(user: User, chat: Chat) -> ReplyKeyboardMarkup:
            """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞"""
            chat_buttons = get_chat_buttons(user.current_chat_index)

            web_search_text = "üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
            if hasattr(chat, 'web_search_enabled') and chat.web_search_enabled:
                web_search_text += " ‚úÖ"
            else:
                web_search_text += " ‚ùå"

            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="üîÑ –ù–æ–≤—ã–π —á–∞—Ç"),
                        KeyboardButton(text=web_search_text),
                        KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    ],
                    [
                        KeyboardButton(text="‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"),
                        KeyboardButton(text="üìã –ë—É—Ñ–µ—Ä")
                    ] + chat_buttons
                ],
                resize_keyboard=True
            )

            return keyboard

        def get_chat_buttons(current_chat_index: int) -> List[KeyboardButton]:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
            buttons = []
            chat_emojis = {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 2, "3Ô∏è‚É£": 3, "4Ô∏è‚É£": 4, "üìù": 5}

            for emoji, index in chat_emojis.items():
                if index == current_chat_index:
                    buttons.append(KeyboardButton(text=f"{emoji}‚úÖ"))
                else:
                    buttons.append(KeyboardButton(text=emoji))

            return buttons

        def get_buffer_keyboard() -> ReplyKeyboardMarkup:
            """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –±—É—Ñ–µ—Ä–∞"""
            return ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä"),
                        KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
                    ]
                ],
                resize_keyboard=True
            )

        def get_chat_model_inline_keyboard(models: List[Dict], current_model: Optional[str] = None) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞"""
            buttons = []

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if model_selection_usecase:
                text_models = model_selection_usecase.filter_text_models(models)
            else:
                # –ï—Å–ª–∏ —é–∑–∫–µ–π—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
                text_models = models

            for model in text_models:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
                is_selected = model.get("id") == current_model
                text = f"{model_name} {'‚úÖ' if is_selected else ''}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                is_allowed = model.get("is_allowed", False)
                if not is_allowed:
                    text += " üîí"

                callback_data = json.dumps({
                    "action": "select_chat_model",
                    "model_id": model.get("id"),
                    "allowed": is_allowed
                })

                buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"action": "cancel"}))])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_image_model_inline_keyboard(models: List[Dict],
                                            current_model: Optional[str] = None) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
            buttons = []

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if model_selection_usecase:
                image_models = model_selection_usecase.filter_image_models(models)
            else:
                # –ï—Å–ª–∏ —é–∑–∫–µ–π—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
                image_models = models

            for model in image_models:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                model_name = model.get("label") or model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
                is_selected = model.get("id") == current_model
                text = f"{model_name} {'‚úÖ' if is_selected else ''}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                is_allowed = model.get("is_allowed", False)
                if not is_allowed:
                    text += " üîí"

                callback_data = json.dumps({
                    "action": "select_image_model",
                    "model_id": model.get("id"),
                    "allowed": is_allowed
                })

                buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=json.dumps({"action": "cancel"}))])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_web_search_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
            buttons = [
                [InlineKeyboardButton(
                    text=f"üîç –í–µ–±-–ø–æ–∏—Å–∫ {'‚úÖ' if enabled else '‚ùå'}",
                    callback_data=json.dumps({"action": "toggle_web_search"})
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=json.dumps({"action": "cancel"})
                )]
            ]
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_context_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
            buttons = [
                [InlineKeyboardButton(
                    text=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω {'‚úÖ' if enabled else ''}",
                    callback_data=json.dumps({"action": "context_on"})
                )],
                [InlineKeyboardButton(
                    text=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω {'‚úÖ' if not enabled else ''}",
                    callback_data=json.dumps({"action": "context_off"})
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=json.dumps({"action": "cancel"})
                )]
            ]
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_chat_list_inline_keyboard(chats: List[Chat], current_chat_index: int,
                                          page: int, total_pages: int) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
            buttons = []

            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for chat in chats:
                text = f"–ß–∞—Ç {chat.chat_index}"
                if chat.name:
                    text += f" | {chat.name}"
                if chat.chat_index == current_chat_index:
                    text += " ‚úÖ"

                callback_data = json.dumps({
                    "action": "select_chat",
                    "chat_index": chat.chat_index,
                    "current_page": page
                })

                buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []

            if page > 1:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=json.dumps({"action": "chat_page", "page": page - 1})
                ))

            nav_buttons.append(InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data=json.dumps({"action": "current_page"})
            ))

            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è",
                    callback_data=json.dumps({"action": "chat_page", "page": page + 1})
                ))

            if nav_buttons:
                buttons.append(nav_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            buttons.append([InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç",
                callback_data=json.dumps({"action": "create_new_chat"})
            )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            buttons.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=json.dumps({"action": "cancel"})
            )])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_referral_templates_inline_keyboard(templates: List[Any]) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
            buttons = []

            for template in templates:
                text = f"{template.name} | {template.tokens} —Ç–æ–∫–µ–Ω–æ–≤"
                callback_data = json.dumps({
                    "action": "select_referral_template",
                    "template_id": template.id
                })

                buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            buttons.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=json.dumps({"action": "cancel"})
            )])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_formula_image_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            buttons = [
                [InlineKeyboardButton(
                    text=f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {'‚úÖ' if enabled else ''}",
                    callback_data=json.dumps({"action": "formula_to_image_on"})
                )],
                [InlineKeyboardButton(
                    text=f"–ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã {'‚úÖ' if not enabled else ''}",
                    callback_data=json.dumps({"action": "formula_to_image_off"})
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=json.dumps({"action": "cancel"})
                )]
            ]
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_links_parse_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Å—ã–ª–æ–∫"""
            buttons = [
                [InlineKeyboardButton(
                    text=f"–ü–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫–∏ {'‚úÖ' if enabled else ''}",
                    callback_data=json.dumps({"action": "links_parse_on"})
                )],
                [InlineKeyboardButton(
                    text=f"–ù–µ –ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫–∏ {'‚úÖ' if not enabled else ''}",
                    callback_data=json.dumps({"action": "links_parse_off"})
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=json.dumps({"action": "cancel"})
                )]
            ]
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        def get_voice_answer_inline_keyboard(enabled: bool) -> InlineKeyboardMarkup:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–º"""
            buttons = [
                [InlineKeyboardButton(
                    text=f"–û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º {'‚úÖ' if enabled else ''}",
                    callback_data=json.dumps({"action": "voice_answer_on"})
                )],
                [InlineKeyboardButton(
                    text=f"–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º {'‚úÖ' if not enabled else ''}",
                    callback_data=json.dumps({"action": "voice_answer_off"})
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=json.dumps({"action": "cancel"})
                )]
            ]
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

        @router.message(Command("start"))
        async def handle_start_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                if message.text and len(message.text.split()) > 1:
                    user.referral_code = message.text.split()[1]
                    await user_repository.update(user)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if present_usecase:
                    await present_usecase.send_notifications(user)

                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø BotHub, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
                    "‚ú® –Ø –º–æ–≥—É:\n"
                    "üìù –û–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
                    "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
                    "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ!\n\n"
                    "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                    "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                    "/gpt_config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n"
                    "/image_generation_config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    "/context - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
                    "/web_search - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                    "/system_prompt - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n"
                    "/link_account - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É BotHub\n"
                    "/referral - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n"
                    "/present - –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
                    parse_mode="Markdown"
                )

        @router.message(Command("reset"))
        async def handle_reset_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                await chat_session_usecase.reset_context(user, chat)
                chat.reset_context_counter()
                await chat_repository.update(chat)

                await message.answer(
                    "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    parse_mode="Markdown",
                    reply_markup=get_main_keyboard(user, chat)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="Markdown"
                )

        @router.message(Command("link_account"))
        async def handle_link_account_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link_account –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
            try:
                user = await get_or_create_user(message)

                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å email, –∑–Ω–∞—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
                if user.email:
                    await message.answer(
                        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É BotHub.",
                        parse_mode="Markdown"
                    )
                    return

                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    link = await account_connection_usecase.generate_connection_link(user)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
                    await message.answer(
                        f"–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É BotHub, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{link}\n\n"
                        f"–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ BotHub."
                    )
                except Exception as link_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {link_error}", exc_info=True)
                    await message.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏. \n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n"
                        f"1) –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ bothub.chat\n"
                        f"2) –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                        f"3) –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã'\n"
                        f"4) –î–æ–±–∞–≤—å—Ç–µ Telegram –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
                        parse_mode="Markdown"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã link_account: {e}", exc_info=True)
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("gpt_config"))
        async def handle_gpt_config_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gpt_config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                if not model_selection_usecase:
                    await message.answer(
                        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                models = await model_selection_usecase.list_available_models(user)

                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
                    parse_mode="Markdown",
                    reply_markup=get_chat_model_inline_keyboard(models, chat.bothub_chat_model)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã gpt_config: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("image_generation_config"))
        async def handle_image_generation_config_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /image_generation_config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                if not model_selection_usecase:
                    await message.answer(
                        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                models = await model_selection_usecase.list_available_models(user)

                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
                    parse_mode="Markdown",
                    reply_markup=get_image_model_inline_keyboard(models, user.image_generation_model)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã image_generation_config: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("context"))
        async def handle_context_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /context –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                await message.answer(
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:\n\n"
                    "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
                    parse_mode="Markdown",
                    reply_markup=get_context_inline_keyboard(chat.context_remember)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã context: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("web_search"))
        async def handle_web_search_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /web_search –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                if not web_search_usecase:
                    await message.answer(
                        "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±-–ø–æ–∏—Å–∫–∞
                web_search_enabled = await web_search_usecase.gateway.get_web_search(user, chat)

                await message.answer(
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º:\n\n"
                    "–í–µ–±-–ø–æ–∏—Å–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                    parse_mode="Markdown",
                    reply_markup=get_web_search_inline_keyboard(web_search_enabled)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã web_search: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("system_prompt"))
        async def handle_system_prompt_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /system_prompt –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                if not system_prompt_usecase:
                    await message.answer(
                        "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                command_text = message.text.strip()
                parts = command_text.split(maxsplit=1)

                if len(parts) > 1:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                    new_prompt = parts[1]

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞
                    if new_prompt.lower() == "reset":
                        await system_prompt_usecase.reset_system_prompt(user, chat)
                        await message.answer(
                            "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω.",
                            parse_mode="Markdown",
                            reply_markup=get_main_keyboard(user, chat)
                        )
                        return

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
                    await system_prompt_usecase.set_system_prompt(user, chat, new_prompt)
                    await message.answer(
                        f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\n{new_prompt}",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å
                    current_prompt = await system_prompt_usecase.get_system_prompt(chat)

                    if current_prompt:
                        await message.answer(
                            f"üìù –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n{current_prompt}\n\n"
                            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/system_prompt –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç`\n\n"
                            f"–î–ª—è —Å–±—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/system_prompt reset`",
                            parse_mode="Markdown"
                        )
                    else:
                        await message.answer(
                            "üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
                            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. "
                            "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/system_prompt —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞`",
                            parse_mode="Markdown"
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã system_prompt: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("formula"))
        async def handle_formula_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /formula –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                await message.answer(
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                    "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    parse_mode="Markdown",
                    reply_markup=get_formula_image_inline_keyboard(chat.formula_to_image)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã formula: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("scan_links"))
        async def handle_scan_links_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scan_links –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Å—ã–ª–æ–∫"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                await message.answer(
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Å—ã–ª–æ–∫:\n\n"
                    "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
                    parse_mode="Markdown",
                    reply_markup=get_links_parse_inline_keyboard(chat.links_parse)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã scan_links: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("voice"))
        async def handle_voice_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /voice –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–º"""
            try:
                user = await get_or_create_user(message)
                chat = await get_or_create_chat(user)

                await message.answer(
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–º:\n\n"
                    "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
                    parse_mode="Markdown",
                    reply_markup=get_voice_answer_inline_keyboard(chat.answer_to_voice)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã voice: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("present"))
        async def handle_present_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /present –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
            try:
                user = await get_or_create_user(message)

                if not present_usecase:
                    await message.answer(
                        "‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                command_text = message.text.strip()
                parts = command_text.split(maxsplit=2)

                if len(parts) > 2:
                    # –§–æ—Ä–º–∞—Ç: /present username|email –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    recipient = parts[1]
                    try:
                        tokens = int(parts[2])
                    except ValueError:
                        await message.answer(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                            parse_mode="Markdown"
                        )
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    is_valid, formatted_recipient = await present_usecase.verify_present_format(recipient)

                    if not is_valid:
                        await message.answer(
                            f"‚ùå {formatted_recipient}",
                            parse_mode="Markdown"
                        )
                        return

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
                    result = await present_usecase.send_present(user, formatted_recipient, tokens)

                    if result["success"]:
                        await message.answer(
                            f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {formatted_recipient}\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens}",
                            parse_mode="Markdown",
                            reply_markup=get_main_keyboard(user, await get_or_create_chat(user))
                        )
                    else:
                        await message.answer(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                            parse_mode="Markdown"
                        )
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
                    await message.answer(
                        "üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                        "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                        "`/present –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
                        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
                        "- Email-–∞–¥—Ä–µ—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@example.com)\n"
                        "- –ò–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)\n\n"
                        "–ü—Ä–∏–º–µ—Ä: `/present @friend 100`",
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã present: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("referral"))
        async def handle_referral_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /referral –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"""
            try:
                user = await get_or_create_user(message)

                if not referral_usecase:
                    await message.answer(
                        "‚ùå –§—É–Ω–∫—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É –∫–æ–º–∞–Ω–¥—ã
                command_text = message.text.strip()
                parts = command_text.split(maxsplit=1)

                if len(parts) > 1 and parts[1] == "new":
                    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
                    templates = await referral_usecase.list_referral_templates(user)

                    if not templates:
                        await message.answer(
                            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
                            parse_mode="Markdown"
                        )
                        return

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                    await message.answer(
                        "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
                        parse_mode="Markdown",
                        reply_markup=get_referral_templates_inline_keyboard(templates)
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    programs = await referral_usecase.list_referral_programs(user)

                    if not programs:
                        await message.answer(
                            "üîÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.\n\n"
                            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/referral new`",
                            parse_mode="Markdown"
                        )
                        return

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
                    first_message = True
                    for program in programs:
                        if first_message:
                            await message.answer(
                                "üîÑ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
                                parse_mode="Markdown"
                            )
                            first_message = False

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        links = referral_usecase.get_referral_links(program)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                        program_text = (
                            f"üìä *{program.template.name if program.template else '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'}*\n\n"
                            f"–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{links['code']}`\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {program.participants}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {program.balance} {program.template.currency if program.template else ''}\n\n"
                            f"–°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
                            f"üåê [–í–µ–±-—Å—Å—ã–ª–∫–∞]({links['web']})\n"
                            f"üì± [Telegram]({links['telegram']})"
                        )

                        await message.answer(
                            program_text,
                            parse_mode="Markdown",
                            disable_web_page_preview=True
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã referral: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("chat_list"))
        async def handle_chat_list_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chat_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
            try:
                user = await get_or_create_user(message)

                if not chat_service:
                    await message.answer(
                        "‚ùå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        parse_mode="Markdown"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                chats, total_pages = await chat_service.get_chat_list(user, user.current_chat_list_page)

                await message.answer(
                    "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤:",
                    parse_mode="Markdown",
                    reply_markup=get_chat_list_inline_keyboard(chats, user.current_chat_index,
                                                               user.current_chat_list_page, total_pages)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã chat_list: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        @router.message(Command("help"))
        async def handle_help_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏"""
            try:
                await message.answer(
                    "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*\n\n"
                    "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                    "/reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                    "/link_account - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É BotHub\n"
                    "/gpt_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
                    "/image_generation_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    "/context - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
                    "/web_search - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                    "/system_prompt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n"
                    "/formula - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                    "/scan_links - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Å—ã–ª–æ–∫\n"
                    "/voice - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–º\n"
                    "/present - –ü–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                    "/referral - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n"
                    "/chat_list - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤\n"
                    "/help - –í—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
                    "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é "
                    "–≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (—á–∞—Ç, –ø–æ–∏—Å–∫ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help: {e}", exc_info=True)
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–≠–ö–û–í ====================

        @router.callback_query()
        async def handle_callback_query(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
            try:
                user = await get_or_create_user(callback.message)
                chat = await get_or_create_chat(user)

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
                try:
                    data = json.loads(callback.data)
                    action = data.get("action")
                except:
                    await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
                if action == "cancel":
                    # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–≤–µ—á–∞–µ–º
                    await callback.message.delete_reply_markup()
                    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

                elif action == "select_chat_model":
                    if not model_selection_usecase:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    model_id = data.get("model_id")
                    is_allowed = data.get("allowed", False)

                    if not is_allowed:
                        await callback.answer("–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                    await model_selection_usecase.select_chat_model(user, chat, model_id)
                    await user_repository.update(user)
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer(f"–ú–æ–¥–µ–ª—å {model_id} –≤—ã–±—Ä–∞–Ω–∞")
                    await callback.message.answer(
                        f"‚úÖ –ú–æ–¥–µ–ª—å *{model_id}* —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –∏ –Ω–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "select_image_model":
                    if not model_selection_usecase:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    model_id = data.get("model_id")
                    is_allowed = data.get("allowed", False)

                    if not is_allowed:
                        await callback.answer("–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    await model_selection_usecase.select_image_model(user, model_id)
                    await user_repository.update(user)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer(f"–ú–æ–¥–µ–ª—å {model_id} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    await callback.message.answer(
                        f"‚úÖ –ú–æ–¥–µ–ª—å *{model_id}* —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "toggle_web_search":
                    if not web_search_usecase:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ
                    current_status = await web_search_usecase.gateway.get_web_search(user, chat)
                    new_status = not current_status

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                    await web_search_usecase.toggle_web_search(user, chat, new_status)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await callback.message.edit_reply_markup(
                        reply_markup=get_web_search_inline_keyboard(new_status)
                    )

                    status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await callback.answer(f"–í–µ–±-–ø–æ–∏—Å–∫ {status_text}")

                elif action == "context_on":
                    # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    chat.context_remember = True
                    await chat_repository.update(chat)

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    await chat_session_usecase.gateway.create_new_chat(user, chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω")
                    await callback.message.answer(
                        "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "context_off":
                    # –í—ã–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    chat.context_remember = False
                    chat.reset_context_counter()
                    await chat_repository.update(chat)

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    await chat_session_usecase.gateway.create_new_chat(user, chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω")
                    await callback.message.answer(
                        "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "formula_to_image_on":
                    # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    chat.formula_to_image = True
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª –≤–∫–ª—é—á–µ–Ω–∞")
                    await callback.message.answer(
                        "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "formula_to_image_off":
                    # –í—ã–∫–ª—é—á–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    chat.formula_to_image = False
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª –≤—ã–∫–ª—é—á–µ–Ω–∞")
                    await callback.message.answer(
                        "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "links_parse_on":
                    # –í–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
                    chat.links_parse = True
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω")
                    await callback.message.answer(
                        "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "links_parse_off":
                    # –í—ã–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
                    chat.links_parse = False
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω")
                    await callback.message.answer(
                        "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "voice_answer_on":
                    # –í–∫–ª—é—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º
                    chat.answer_to_voice = True
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–û—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º –≤–∫–ª—é—á–µ–Ω—ã")
                    await callback.message.answer(
                        "‚úÖ –û—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º –≤–∫–ª—é—á–µ–Ω—ã.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "voice_answer_off":
                    # –í—ã–∫–ª—é—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º
                    chat.answer_to_voice = False
                    await chat_repository.update(chat)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.delete_reply_markup()
                    await callback.answer("–û—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º –≤—ã–∫–ª—é—á–µ–Ω—ã")
                    await callback.message.answer(
                        "‚úÖ –û—Ç–≤–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º –≤—ã–∫–ª—é—á–µ–Ω—ã.",
                        parse_mode="Markdown",
                        reply_markup=get_main_keyboard(user, chat)
                    )

                elif action == "chat_page":
                    if not chat_service:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–æ–≤
                    page = data.get("page", 1)
                    user.current_chat_list_page = page
                    await user_repository.update(user)

                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                    chats, total_pages = await chat_service.get_chat_list(user, page)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await callback.message.edit_reply_markup(
                        reply_markup=get_chat_list_inline_keyboard(chats, user.current_chat_index, page, total_pages)
                    )

                    await callback.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

                elif action == "select_chat":
                    if not chat_service:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
                    chat_index = data.get("chat_index")
                    current_page = data.get("current_page", 1)

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —á–∞—Ç
                    selected_chat = await chat_service.switch_chat(user, chat_index)

                    if selected_chat:
                        await user_repository.update(user)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        chats, total_pages = await chat_service.get_chat_list(user, current_page)
                        await callback.message.edit_reply_markup(
                            reply_markup=get_chat_list_inline_keyboard(chats, user.current_chat_index, current_page,
                                                                       total_pages)
                        )

                        await callback.answer(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç {chat_index}")
                        await callback.message.answer(
                            f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç {chat_index}" + (f" | {selected_chat.name}" if selected_chat.name else ""),
                            parse_mode="Markdown",
                            reply_markup=get_main_keyboard(user, selected_chat)
                        )
                    else:
                        await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

                elif action == "create_new_chat":
                    if not chat_service:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                    await callback.message.delete_reply_markup()
                    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞")

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.state = "waiting_for_chat_name"
                    await user_repository.update(user)

                    await callback.message.answer(
                        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                        parse_mode="Markdown"
                    )

                elif action == "select_referral_template":
                    if not referral_usecase:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
                    template_id = data.get("template_id")

                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
                    try:
                        program = await referral_usecase.create_referral_program(user, template_id)

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        links = referral_usecase.get_referral_links(program)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                        program_text = (
                            f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                            f"üìä *{program.template.name if program.template else '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'}*\n\n"
                            f"–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{links['code']}`\n\n"
                            f"–°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
                            f"üåê [–í–µ–±-—Å—Å—ã–ª–∫–∞]({links['web']})\n"
                            f"üì± [Telegram]({links['telegram']})"
                        )

                        await callback.message.delete_reply_markup()
                        await callback.message.answer(
                            program_text,
                            parse_mode="Markdown",
                            disable_web_page_preview=True,
                            reply_markup=get_main_keyboard(user, chat)
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}", exc_info=True)
                        await callback.message.delete_reply_markup()
                        await callback.message.answer(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: {str(e)}",
                            parse_mode="Markdown",
                            reply_markup=get_main_keyboard(user, chat)
                        )

                elif action == "MJ_BUTTON":
                    if not image_generation_usecase:
                        await callback.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        return

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ Midjourney
                    button_id = data.get("id")

                    if not button_id:
                        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–Ω–æ–ø–∫–∏")
                        return

                    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å Midjourney...")
                    await callback.message.answer("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤—ã–±–æ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

                    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ Midjourney
                    try:
                        # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π usecase –¥–ª—è –∫–Ω–æ–ø–æ–∫ Midjourney
                        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
                        result = await image_generation_usecase.generate_image(
                            user,
                            chat,
                            f"–ü—Ä–∏–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ Midjourney (button_id: {button_id})"
                        )

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if "response" in result and "attachments" in result["response"]:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            for attachment in result["response"]["attachments"]:
                                if "file" in attachment and attachment["file"].get("type") == "IMAGE":
                                    image_url = attachment["file"].get("url", "")
                                    if not image_url and "path" in attachment["file"]:
                                        image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                                    if image_url:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ Midjourney
                                        inline_markup = None
                                        if "buttons" in attachment and any(
                                                btn.get("type") == "MJ_BUTTON" for btn in attachment["buttons"]):
                                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Midjourney
                                            mj_buttons = []
                                            for btn in attachment["buttons"]:
                                                if btn.get("type") == "MJ_BUTTON":
                                                    mj_buttons.append(
                                                        InlineKeyboardButton(
                                                            text=btn.get("mj_native_label", "–î–µ–π—Å—Ç–≤–∏–µ"),
                                                            callback_data=json.dumps({
                                                                "action": "MJ_BUTTON",
                                                                "id": btn.get("id")
                                                            })
                                                        )
                                                    )

                                            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                            if mj_buttons:
                                                inline_markup = InlineKeyboardMarkup(inline_keyboard=[mj_buttons])

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑
                                        await callback.message.answer_photo(
                                            photo=image_url,
                                            caption=result["response"].get("content", ""),
                                            reply_markup=inline_markup
                                        )
                        else:
                            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            content = result.get("response", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É")
                            await callback.message.answer(content, parse_mode="Markdown")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ Midjourney: {e}", exc_info=True)
                        await callback.message.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ Midjourney. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            parse_mode="Markdown"
                        )

                    else:
                        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}", exc_info=True)
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

                # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –° –£–ú–ù–´–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –ù–ê–ú–ï–†–ï–ù–ò–ô ====================

                @router.message(F.text)
                async def handle_text_message(message: Message):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                        user = await get_or_create_user(message)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        if user.state == "waiting_for_chat_name":
                            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                            if message.text.startswith("/cancel"):
                                user.state = None
                                await user_repository.update(user)
                                await message.answer(
                                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, await get_or_create_chat(user))
                                )
                                return

                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
                            chat_name = message.text.strip()
                            if len(chat_name) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —á–∞—Ç–∞
                                await message.answer(
                                    "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 50 —Å–∏–º–≤–æ–ª–æ–≤.",
                                    parse_mode="Markdown"
                                )
                                return

                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                            if chat_service:
                                new_chat = await chat_service.create_new_chat(user, chat_name)
                                user.state = None
                                await user_repository.update(user)

                                await message.answer(
                                    f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat_name}",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, new_chat)
                                )
                            return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –±—É—Ñ–µ—Ä–∞
                        elif user.state == "buffer_mode":
                            if message.text.lower() in ["/cancel", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
                                user.state = None
                                await user_repository.update(user)

                                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                                chat = await get_or_create_chat(user)
                                if buffer_message_usecase:
                                    buffer_message_usecase.clear_buffer(chat)

                                await message.answer(
                                    "‚úÖ –†–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, chat)
                                )
                                return

                            elif message.text.lower() in ["/send_buffer", "üì§ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä"]:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
                                user.state = None
                                await user_repository.update(user)

                                chat = await get_or_create_chat(user)
                                if buffer_message_usecase:
                                    try:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
                                        await message.chat.do(ChatAction.TYPING)
                                        result = await buffer_message_usecase.send_buffer(user, chat)

                                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                                        if "response" in result and "content" in result["response"]:
                                            await message.answer(
                                                result["response"]["content"],
                                                parse_mode="Markdown",
                                                reply_markup=get_main_keyboard(user, chat)
                                            )
                                        else:
                                            await message.answer(
                                                "‚úÖ –ë—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.",
                                                parse_mode="Markdown",
                                                reply_markup=get_main_keyboard(user, chat)
                                            )
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—É—Ñ–µ—Ä–∞: {e}", exc_info=True)
                                        await message.answer(
                                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—É—Ñ–µ—Ä–∞: {str(e)}",
                                            parse_mode="Markdown",
                                            reply_markup=get_main_keyboard(user, chat)
                                        )
                                return

                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
                            chat = await get_or_create_chat(user)
                            if buffer_message_usecase:
                                await buffer_message_usecase.add_to_buffer(user, chat, message.text)
                                await message.answer(
                                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä.",
                                    reply_markup=get_buffer_keyboard()
                                )
                            return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                        if message.text == "üîÑ –ù–æ–≤—ã–π —á–∞—Ç":
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é
                            chat = await get_or_create_chat(user)
                            await chat_session_usecase.gateway.create_new_chat(user, chat)
                            chat.reset_context_counter()
                            await chat_repository.update(chat)

                            await message.answer(
                                f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é {chat.bothub_chat_model or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}",
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )
                            return

                        elif message.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π":
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            await message.answer(
                                "üé® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
                                parse_mode="Markdown"
                            )
                            return

                        elif message.text.startswith("üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"):
                            if not web_search_usecase:
                                await message.answer(
                                    "‚ùå –§—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                                    parse_mode="Markdown"
                                )
                                return

                            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±-–ø–æ–∏—Å–∫–∞
                            chat = await get_or_create_chat(user)
                            current_status = await web_search_usecase.gateway.get_web_search(user, chat)
                            new_status = not current_status

                            await web_search_usecase.toggle_web_search(user, chat, new_status)

                            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
                            await message.answer(
                                f"üîç –í–µ–±-–ø–æ–∏—Å–∫ {status_text}",
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )
                            return

                        elif message.text == "‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                            await message.answer(
                                "‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n"
                                "/gpt_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n"
                                "/image_generation_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                                "/context - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
                                "/web_search - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–æ–º\n"
                                "/system_prompt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n"
                                "/formula - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–æ—Ä–º—É–ª\n"
                                "/scan_links - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Å—ã–ª–æ–∫\n"
                                "/voice - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–º\n"
                                "/chat_list - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤",
                                parse_mode="Markdown"
                            )
                            return

                        elif message.text == "üìã –ë—É—Ñ–µ—Ä":
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞
                            user.state = "buffer_mode"
                            await user_repository.update(user)

                            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                            chat = await get_or_create_chat(user)
                            if buffer_message_usecase:
                                buffer_message_usecase.clear_buffer(chat)

                            await message.answer(
                                "üìã –†–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—É—Ñ–µ—Ä.\n"
                                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä'.\n"
                                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                                parse_mode="Markdown",
                                reply_markup=get_buffer_keyboard()
                            )
                            return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π —á–∞—Ç–∞
                        chat_emojis = {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 2, "3Ô∏è‚É£": 3, "4Ô∏è‚É£": 4, "üìù": 5}
                        for emoji, index in chat_emojis.items():
                            if message.text.startswith(emoji):
                                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
                                user.current_chat_index = index
                                await user_repository.update(user)

                                chat = await get_or_create_chat(user)

                                await message.answer(
                                    f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç {index}" + (f" | {chat.name}" if chat.name else ""),
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, chat)
                                )
                                return

                        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
                        await message.chat.do(ChatAction.TYPING)

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        chat = await get_or_create_chat(user)

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        intent, intent_data = intent_detection_service.detect_intent(
                            message.text,
                            str(user.id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            None  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        intent_detection_service.update_user_context(str(user.id), intent, intent_data)

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                        if intent == IntentType.IMAGE_GENERATION and image_generation_usecase:
                            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            prompt = intent_data.get("prompt", message.text)

                            try:
                                result = await image_generation_usecase.generate_image(user, chat, prompt)

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
                                if "response" in result and "attachments" in result["response"]:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    for attachment in result["response"]["attachments"]:
                                        if "file" in attachment and attachment["file"].get("type") == "IMAGE":
                                            image_url = attachment["file"].get("url", "")
                                            if not image_url and "path" in attachment["file"]:
                                                image_url = f"https://storage.bothub.chat/bothub-storage/{attachment['file']['path']}"

                                            if image_url:
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ Midjourney
                                                inline_markup = None
                                                if "buttons" in attachment and any(
                                                        btn.get("type") == "MJ_BUTTON" for btn in attachment["buttons"]):
                                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Midjourney
                                                    mj_buttons = []
                                                    for btn in attachment["buttons"]:
                                                        if btn.get("type") == "MJ_BUTTON":
                                                            mj_buttons.append(
                                                                InlineKeyboardButton(
                                                                    text=btn.get("mj_native_label", "–î–µ–π—Å—Ç–≤–∏–µ"),
                                                                    callback_data=json.dumps({
                                                                        "action": "MJ_BUTTON",
                                                                        "id": btn.get("id")
                                                                    })
                                                                )
                                                            )

                                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                                    if mj_buttons:
                                                        inline_markup = InlineKeyboardMarkup(inline_keyboard=[mj_buttons])

                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑
                                                await message.answer_photo(
                                                    photo=image_url,
                                                    caption=result["response"].get("content", ""),
                                                    reply_markup=inline_markup
                                                )

                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                elif "response" in result and "content" in result["response"] and result["response"][
                                    "content"]:
                                    await message.answer(
                                        result["response"]["content"],
                                        parse_mode="Markdown",
                                        reply_markup=get_main_keyboard(user, chat)
                                    )
                                else:
                                    await message.answer(
                                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                                        parse_mode="Markdown",
                                        reply_markup=get_main_keyboard(user, chat)
                                    )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
                                await message.answer(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, chat)
                                )

                        elif intent == IntentType.WEB_SEARCH and web_search_usecase:
                            # –í–µ–±-–ø–æ–∏—Å–∫
                            query = intent_data.get("query", message.text)

                            try:
                                result = await web_search_usecase.search(user, chat, query)

                                if "response" in result and "content" in result["response"]:
                                    await message.answer(
                                        result["response"]["content"],
                                        parse_mode="Markdown",
                                        reply_markup=get_main_keyboard(user, chat)
                                    )
                                else:
                                    await message.answer(
                                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                                        parse_mode="Markdown",
                                        reply_markup=get_main_keyboard(user, chat)
                                    )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ: {e}", exc_info=True)
                                await message.answer(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, chat)
                                )

                        else:
                            # –û–±—ã—á–Ω—ã–π —á–∞—Ç
                            try:
                                result = await chat_session_usecase.send_message(user, chat, message.text)

                                if "response" in result and "content" in result["response"]:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                                    content = result["response"]["content"]
                                    if len(content) > 4000:
                                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                                        await send_long_message(message, content)
                                    else:
                                        await message.answer(
                                            content,
                                            parse_mode="Markdown",
                                            reply_markup=get_main_keyboard(user, chat)
                                        )

                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
                                    if "tokens" in result:
                                        await message.answer(
                                            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result['tokens']}",
                                            parse_mode="Markdown"
                                        )
                                else:
                                    await message.answer(
                                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.",
                                        parse_mode="Markdown",
                                        reply_markup=get_main_keyboard(user, chat)
                                    )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                                await message.answer(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                                    parse_mode="Markdown",
                                    reply_markup=get_main_keyboard(user, chat)
                                )

                    except Exception as e:
                        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                        await message.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            parse_mode="Markdown"
                        )

                # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–î–ò–ê –§–ê–ô–õ–û–í ====================

                @router.message(F.voice | F.audio)
                async def handle_voice_message(message: Message):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
                    try:
                        user = await get_or_create_user(message)
                        chat = await get_or_create_chat(user)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞
                        if user.state == "buffer_mode" and buffer_message_usecase:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            file_id = message.voice.file_id if message.voice else message.audio.file_id
                            file = await message.bot.get_file(file_id)
                            file_path = file.file_path
                            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                            await buffer_message_usecase.add_to_buffer(
                                user,
                                chat,
                                None,  # –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
                                file_url,
                                f"voice_{file_id}.ogg"
                            )

                            await message.answer(
                                "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä.",
                                reply_markup=get_buffer_keyboard()
                            )
                            return

                        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await message.chat.do(ChatAction.TYPING)

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                        file_id = message.voice.file_id if message.voice else message.audio.file_id
                        file = await message.bot.get_file(file_id)
                        file_path = file.file_path
                        file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ BotHub
                        result = await chat_session_usecase.send_message(user, chat, "", [file_url])

                        if "response" in result and "content" in result["response"]:
                            await message.answer(
                                result["response"]["content"],
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )
                        else:
                            await message.answer(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                        await message.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                            parse_mode="Markdown"
                        )

                @router.message(F.photo | F.document)
                async def handle_media_message(message: Message):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
                    try:
                        user = await get_or_create_user(message)
                        chat = await get_or_create_chat(user)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞
                        if user.state == "buffer_mode" and buffer_message_usecase:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            if message.photo:
                                file_id = message.photo[-1].file_id
                                file_name = f"photo_{file_id}.jpg"
                            else:
                                file_id = message.document.file_id
                                file_name = message.document.file_name or f"document_{file_id}"

                            file = await message.bot.get_file(file_id)
                            file_path = file.file_path
                            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                            await buffer_message_usecase.add_to_buffer(
                                user,
                                chat,
                                message.caption,
                                file_url,
                                file_name
                            )

                            await message.answer(
                                "‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä.",
                                reply_markup=get_buffer_keyboard()
                            )
                            return

                        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await message.chat.do(ChatAction.TYPING)

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                        if message.photo:
                            file_id = message.photo[-1].file_id
                            file_name = f"photo_{file_id}.jpg"
                        else:
                            file_id = message.document.file_id
                            file_name = message.document.file_name or f"document_{file_id}"

                        file = await message.bot.get_file(file_id)
                        file_path = file.file_path
                        file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ BotHub
                        result = await chat_session_usecase.send_message(user, chat, message.caption or "", [file_url])

                        if "response" in result and "content" in result["response"]:
                            await message.answer(
                                result["response"]["content"],
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )
                        else:
                            await message.answer(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.",
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                        await message.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.",
                            parse_mode="Markdown"
                        )

                @router.message(Command("test"))
                async def handle_test_command(message: Message):
                    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
                    try:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                        await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

                        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        me = await message.bot.get_me()
                        await message.answer(
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\nid: {me.id}\nusername: {me.username}\nname: {me.first_name}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
                        try:
                            user = await get_or_create_user(message)
                            chat = await get_or_create_chat(user)
                            await message.answer(
                                f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: id={user.id}, chat_index={chat.chat_index}")
                        except Exception as db_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_error}", exc_info=True)
                            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(db_error)}")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}", exc_info=True)
                        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

                # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                @router.message(F.text)
                async def debug_text_handler(message: Message):
                    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
                    try:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")
                        await message.answer(f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

                @router.message(F.video | F.video_note)
                async def handle_video_message(message: Message):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
                    try:
                        user = await get_or_create_user(message)
                        chat = await get_or_create_chat(user)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±—É—Ñ–µ—Ä–∞
                        if user.state == "buffer_mode" and buffer_message_usecase:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            if message.video:
                                file_id = message.video.file_id
                                file_name = f"video_{file_id}.mp4"
                            else:
                                file_id = message.video_note.file_id
                                file_name = f"video_note_{file_id}.mp4"

                            file = await message.bot.get_file(file_id)
                            file_path = file.file_path
                            file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                            await buffer_message_usecase.add_to_buffer(
                                user,
                                chat,
                                message.caption if message.video else None,
                                file_url,
                                file_name
                            )

                            await message.answer(
                                "‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä.",
                                reply_markup=get_buffer_keyboard()
                            )
                            return

                        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await message.chat.do(ChatAction.TYPING)

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                        if message.video:
                            file_id = message.video.file_id
                            file_name = f"video_{file_id}.mp4"
                            caption = message.caption or ""
                        else:
                            file_id = message.video_note.file_id
                            file_name = f"video_note_{file_id}.mp4"
                            caption = ""

                        file = await message.bot.get_file(file_id)
                        file_path = file.file_path
                        file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ BotHub
                        result = await chat_session_usecase.send_message(user, chat, caption, [file_url])

                        if "response" in result and "content" in result["response"]:
                            await message.answer(
                                result["response"]["content"],
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )
                        else:
                            await message.answer(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ.",
                                parse_mode="Markdown",
                                reply_markup=get_main_keyboard(user, chat)
                            )

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
                        await message.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.",
                            parse_mode="Markdown"
                        )

                    return router

                @router.message()
                async def handle_any_message(message: Message):
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç {message.from_user.id}")
                    logger.info(f"–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

                @router.message(lambda msg: msg.text and msg.text.startswith('/'))
                async def any_command(message: Message):
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
                    await message.answer(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")

                @router.message(Command("bothub_test"))
                async def handle_bothub_test(message: Message):
                    try:
                        logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BotHub API –¥–ª—è {message.from_user.id}")

                        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ BotHub API...")

                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
                        user = await get_or_create_user(message)
                        chat = await get_or_create_chat(user)

                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            result = await chat_session_usecase.send_message(user, chat,
                                                                             "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è BotHub API")

                            if "response" in result and "content" in result["response"]:
                                await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç BotHub API: {result['response']['content']}")
                            else:
                                await message.answer("–û—Ç–≤–µ—Ç –æ—Ç BotHub API –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

                        except Exception as api_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ BotHub API: {api_error}", exc_info=True)
                            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ BotHub API: {str(api_error)}")

                    except Exception as e:
                        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ BotHub API: {e}", exc_info=True)
                        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        logger.info("Handlers registered successfully")
        logger.info(f"Returning router of type: {type(router)}")
        logger.info(f"Router created successfully: {router}")
        return router

    except Exception as e:
        logger.error(f"Error in create_handlers: {e}", exc_info=True)
        raise