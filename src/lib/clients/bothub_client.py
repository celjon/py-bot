# src/lib/clients/bothub_client.py

import aiohttp
import json
import logging
import asyncio
from typing import Dict, Any, Optional, List
from src.config.settings import Settings

logger = logging.getLogger(__name__)


class BothubClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å BotHub API"""

    def __init__(self, settings: Settings):
        self.api_url = settings.BOTHUB_API_URL
        self.secret_key = settings.BOTHUB_SECRET_KEY
        self.request_query = "?request_from=telegram&platform=TELEGRAM"

    async def _make_request(
            self,
            path: str,
            method: str = "GET",
            headers: Dict[str, str] = None,
            data: Dict[str, Any] = None,
            as_json: bool = True,
            timeout: int = 30,
            retry: int = 3
    ) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        url = f"{self.api_url}/api/{path}{self.request_query}"
        default_headers = {"Content-type": "application/json"} if as_json else {}
        headers = {**default_headers, **(headers or {})}

        attempt = 0
        last_error = None

        while attempt < retry:
            try:
                async with aiohttp.ClientSession() as session:
                    if method == "GET":
                        async with session.get(url, headers=headers, timeout=timeout) as response:
                            if response.status >= 400:
                                error_text = await response.text()
                                if response.status == 502:
                                    raise Exception(f"–°–µ—Ä–≤–µ—Ä BotHub –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502 Bad Gateway)")
                                raise Exception(f"Error {response.status}: {error_text}")
                            return await response.json()
                    elif method == "POST":
                        async with session.post(
                                url,
                                headers=headers,
                                json=data if as_json else None,
                                data=data if not as_json else None,
                                timeout=timeout
                        ) as response:
                            if response.status >= 400:
                                error_text = await response.text()
                                if response.status == 502:
                                    raise Exception(f"–°–µ—Ä–≤–µ—Ä BotHub –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502 Bad Gateway)")
                                raise Exception(f"Error {response.status}: {error_text}")
                            return await response.json()
                    elif method == "PATCH":
                        async with session.patch(
                                url,
                                headers=headers,
                                json=data if as_json else None,
                                timeout=timeout
                        ) as response:
                            if response.status >= 400:
                                error_text = await response.text()
                                if response.status == 502:
                                    raise Exception(f"–°–µ—Ä–≤–µ—Ä BotHub –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502 Bad Gateway)")
                                raise Exception(f"Error {response.status}: {error_text}")
                            return await response.json()
                    elif method == "PUT":
                        async with session.put(
                                url,
                                headers=headers,
                                json=data if as_json else None,
                                timeout=timeout
                        ) as response:
                            if response.status >= 400:
                                error_text = await response.text()
                                if response.status == 502:
                                    raise Exception(f"–°–µ—Ä–≤–µ—Ä BotHub –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502 Bad Gateway)")
                                raise Exception(f"Error {response.status}: {error_text}")
                            return await response.json()
                    else:
                        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            except Exception as e:
                last_error = e
                attempt += 1
                if attempt >= retry:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ {retry} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
                    raise Exception(f"–û—à–∏–±–∫–∞ API BotHub: {str(e)}")
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retry}): {str(e)}")

        raise last_error  # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    async def authorize(
            self,
            tg_id: Optional[str],
            name: str,
            id_: Optional[str] = None,
            invited_by: Optional[str] = None
    ) -> Dict[str, Any]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {"name": name}
        if tg_id:
            data["tg_id"] = tg_id
        if id_:
            data["id"] = id_
        if invited_by:
            data["invitedBy"] = invited_by

        headers = {"botsecretkey": self.secret_key}

        try:
            return await self._make_request("v2/auth/telegram", "POST", headers, data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
            logger.error(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ BotHub: {str(e)}")

    async def get_user_info(self, access_token: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        headers = {"Authorization": f"Bearer {access_token}"}
        return await self._make_request("v2/auth/me", "GET", headers)

    async def create_new_group(self, access_token: str, name: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {"name": name}
        return await self._make_request("v2/group", "POST", headers, data)

    async def create_new_chat(
            self, access_token: str, group_id: str, name: str, model_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        data = {"name": name}
        if group_id:
            data["groupId"] = group_id
        if model_id:
            data["modelId"] = model_id

        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        logger.info(f"üîß –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π model_id: {model_id}")

        headers = {"Authorization": f"Bearer {access_token}"}
        response = await self._make_request("v2/chat", "POST", headers, data)

        logger.info(f"üîß –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {response}")
        return response

    async def list_models(self, access_token: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        headers = {"Authorization": f"Bearer {access_token}"}
        try:
            response = await self._make_request("v2/model/list", "GET", headers)

            logger.info(f"üîß –ü–æ–ª—É—á–µ–Ω–æ {len(response)} –º–æ–¥–µ–ª–µ–π –æ—Ç API")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_models = [model for model in response if "TEXT_TO_IMAGE" in model.get("features", [])]
            logger.info(f"üîß –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            for model in image_models:
                logger.info(
                    f"üîß   - {model.get('id')} | {model.get('label', 'No label')} | allowed: {model.get('is_allowed', False)} | parent: {model.get('parent_id', 'None')}")

            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
            return []

    async def generate_telegram_connection_token(self, access_token: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –¥–ª—è Python-–±–æ—Ç–∞"""
        headers = {"Authorization": f"Bearer {access_token}"}
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Python-–±–æ—Ç–∞
            response = await self._make_request("v2/auth/telegram-connection-token-python", "GET", headers)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if "telegramConnectionToken" in response:
                token = response["telegramConnectionToken"]
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ 'telegramConnectionToken': {token[:50] if token else '–ü–£–°–¢–û–ô'}...")
                return response
            elif "token" in response:
                # –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ 'token'
                token = response["token"]
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ 'token': {token[:50] if token else '–ü–£–°–¢–û–ô'}...")
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç
                return {"telegramConnectionToken": token}
            elif "data" in response and isinstance(response["data"], dict):
                # –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ data
                data = response["data"]
                if "telegramConnectionToken" in data:
                    token = data["telegramConnectionToken"]
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ data.telegramConnectionToken: {token[:50] if token else '–ü–£–°–¢–û–ô'}...")
                    return {"telegramConnectionToken": token}
                elif "token" in data:
                    token = data["token"]
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ data.token: {token[:50] if token else '–ü–£–°–¢–û–ô'}...")
                    return {"telegramConnectionToken": token}

            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
            logger.error(f"–¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞: {response}")

            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    async def save_chat_settings(
            self,
            access_token: str,
            chat_id: str,
            model: str,
            max_tokens: Optional[int] = None,
            include_context: bool = True,
            system_prompt: str = "",
            temperature: float = 0.7,
            top_p: float = 1.0,
            presence_penalty: float = 0.0,
            frequency_penalty: float = 0.0
    ) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {
            "model": model,
            "include_context": include_context,
            "temperature": temperature,
            "top_p": top_p,
            "system_prompt": system_prompt,
            "presence_penalty": presence_penalty,
            "frequency_penalty": frequency_penalty,
        }

        if max_tokens:
            data["max_tokens"] = max_tokens

        return await self._make_request(f"v2/chat/{chat_id}/settings", "PATCH", headers, data)

    async def reset_context(self, access_token: str, chat_id: str) -> Dict[str, Any]:
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞"""
        headers = {"Authorization": f"Bearer {access_token}"}
        return await self._make_request(f"v2/chat/{chat_id}/clear-context", "PUT", headers)

    async def get_web_search(self, access_token: str, chat_id: str) -> bool:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è —á–∞—Ç–∞

        Args:
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            chat_id: ID —á–∞—Ç–∞

        Returns:
            bool: –í–∫–ª—é—á–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
        """
        headers = {"Authorization": f"Bearer {access_token}"}
        try:
            response = await self._make_request(f"v2/chat/{chat_id}/settings", "GET", headers)
            if "text" not in response:
                return False
            return response["text"].get("enable_web_search", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}")
            return False

    async def enable_web_search(self, access_token: str, chat_id: str, enabled: bool) -> Dict[str, Any]:
        """
        –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞

        Args:
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            chat_id: ID —á–∞—Ç–∞
            enabled: –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å

        Returns:
            Dict[str, Any]: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {"enable_web_search": enabled}
        return await self._make_request(f"v2/chat/{chat_id}/settings", "PATCH", headers, data)

    async def send_message(
            self,
            access_token: str,
            chat_id: str,
            message: str,
            files: List[str] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ BotHub API"""
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {
            "chatId": chat_id,
            "message": message,
            "stream": False
        }

        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message[:50]}...' –≤ —á–∞—Ç {chat_id}")

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            # –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è image-generation –º–æ–¥–µ–ª–µ–π
            if 'midjourney' in chat_id or 'flux' in chat_id or 'dalle' in chat_id:
                logger.info(f"üì® –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–∞—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {chat_id}. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º...")
                await asyncio.sleep(2)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è image-generation —á–∞—Ç–æ–≤

            response = await self._make_request("v2/message/send", "POST", headers, data, timeout=60)
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è")

            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"üì® –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {json.dumps(response, indent=2, ensure_ascii=False)}")

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if response is None:
                logger.error("üì® –û—Ç–≤–µ—Ç –æ—Ç API –ø—É—Å—Ç–æ–π (None)")
                return {
                    "response": {
                        "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    },
                    "error": "EMPTY_RESPONSE"
                }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            result = {"response": {}}
            
            if "content" in response:
                result["response"]["content"] = response["content"]
            else:
                result["response"]["content"] = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result["response"]["attachments"] = []
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ images, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if "images" in response and response["images"]:
                logger.info(f"üì® –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(response['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                for i, img in enumerate(response["images"]):
                    status = img.get("status", "UNKNOWN")
                    img_id = img.get("original_id", "NO_ID")
                    logger.info(f"üì® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i + 1}: —Å—Ç–∞—Ç—É—Å={status}, ID={img_id}")
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if "original" in img:
                        logger.info(f"üì® –î–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {json.dumps(img['original'], indent=2, ensure_ascii=False)}")

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if img.get("original") and img.get("status") == "DONE":
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–ª–∏ –ø—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        file_data = img["original"]
                        file_url = None
                        file_path = None
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                        if isinstance(file_data, dict):
                            # –ü–æ–ª—É—á–∞–µ–º URL –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if "url" in file_data and file_data["url"]:
                                file_url = file_data["url"]
                            # –ü–æ–ª—É—á–∞–µ–º path –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if "path" in file_data and file_data["path"]:
                                file_path = file_data["path"]
                                # –°–æ–∑–¥–∞–µ–º URL –∏–∑ path –µ—Å–ª–∏ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                if not file_url:
                                    # –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ–º —Ñ–æ—Ä–º–∞—Ç—É –∏–∑ PHP –±–æ—Ç–∞
                                    path = file_data["path"]
                                    file_url = f"https://storage.bothub.chat/bothub-storage/{path}"
                                    logger.info(f"üì® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –ø–æ —Ñ–æ—Ä–º–∞—Ç—É PHP-–±–æ—Ç–∞: {file_url}")
                        elif isinstance(file_data, str):
                            file_url = file_data
                            
                        logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_url}")
                        
                        if file_url:
                            attachment = {
                                "file": {
                                    "url": file_url,
                                    "type": "IMAGE",
                                    "path": file_path
                                },
                                "file_id": img.get("original_id", ""),
                                "buttons": img.get("buttons", [])
                            }
                            result["response"]["attachments"].append(attachment)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ discord_attachments
            if "discord_attachments" in response and response["discord_attachments"]:
                logger.info(f"üì® –ù–∞–π–¥–µ–Ω—ã discord_attachments: {len(response['discord_attachments'])}")
                for i, attachment in enumerate(response["discord_attachments"]):
                    if isinstance(attachment, dict) and "url" in attachment:
                        discord_url = attachment["url"]
                        logger.info(f"üì® Discord –≤–ª–æ–∂–µ–Ω–∏–µ {i+1}: {discord_url}")
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Discord URL
                        processed_attachment = {
                            "file": {
                                "url": discord_url,
                                "type": "IMAGE",
                                "discord": True
                            },
                            "file_id": attachment.get("id", "")
                        }
                        result["response"]["attachments"].append(processed_attachment)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö attachments
            if "attachments" in response and response["attachments"]:
                logger.info(f"üì® –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(response['attachments'])} –≤–ª–æ–∂–µ–Ω–∏–π")
                
                for i, attachment in enumerate(response["attachments"]):
                    logger.info(f"üì® –í–ª–æ–∂–µ–Ω–∏–µ {i + 1}: {json.dumps(attachment, indent=2, ensure_ascii=False)}")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    processed_attachment = attachment.copy() if attachment else {}
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–ª–æ–∂–µ–Ω–∏—è
                    if "file" in processed_attachment and processed_attachment["file"]:
                        file_data = processed_attachment["file"]
                        
                        # –ï—Å–ª–∏ file —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(file_data, dict):
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ url –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å path
                            if file_data.get("url") is None and file_data.get("path"):
                                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑ path
                                file_data["url"] = f"https://storage.bothub.chat/bothub-storage/{file_data['path']}"
                                logger.info(f"üì® –°–æ–∑–¥–∞–Ω URL –∏–∑ path: {file_data['url']}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                    if processed_attachment:
                        result["response"]["attachments"].append(processed_attachment)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if "transaction" in response and response["transaction"]:
                tx = response["transaction"]
                if "amount" in tx:
                    result["tokens"] = int(tx["amount"])
                    logger.info(f"üì® –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö: {tx['amount']}")

            return result
        except Exception as e:
            error_message = str(e)
            logger.error(f"üì® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_message}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É rate limit (FLOOD_ERROR)
            if "FLOOD_ERROR" in error_message:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                import re
                timeout_match = re.search(r'(\d+\.?\d*)\s*seconds', error_message)
                wait_time = int(float(timeout_match.group(1))) if timeout_match else 60
                
                logger.warning(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ rate limit. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥.")
                
                return {
                    "response": {
                        "content": f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    },
                    "error": "FLOOD_ERROR",
                    "wait_time": wait_time
                }
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            elif "NOT_ENOUGH_TOKENS" in error_message:
                logger.error(f"üì® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
                return {
                    "response": {
                        "content": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤."
                    },
                    "error": "NOT_ENOUGH_TOKENS"
                }
            elif "MODEL_NOT_FOUND" in error_message:
                logger.error(f"üì® –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {
                    "response": {
                        "content": "–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å."
                    },
                    "error": "MODEL_NOT_FOUND"
                }
            else:
                logger.error(f"üì® –û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_message}")
                return {
                    "response": {
                        "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                    },
                    "error": "GENERAL_ERROR"
                }

    async def save_system_prompt(self, access_token: str, chat_id: str, system_prompt: str) -> Dict[str, Any]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —á–∞—Ç–∞

        Args:
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            chat_id: ID —á–∞—Ç–∞
            system_prompt: –¢–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

        Returns:
            Dict[str, Any]: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {"system_prompt": system_prompt}

        try:
            return await self._make_request(f"v2/chat/{chat_id}/settings", "PATCH", headers, data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {str(e)}")

    async def create_referral_program(self, access_token: str, template_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        headers = {"Authorization": f"Bearer {access_token}"}
        return await self._make_request("v2/referral", "POST", headers, {"templateId": template_id})

    async def update_parent_model(self, access_token: str, chat_id: str, parent_model_id: str) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞"""
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {"parentModelId": parent_model_id}

        return await self._make_request(f"v2/chat/{chat_id}/parent-model", "PATCH", headers, data)

    async def save_model(self, access_token: str, chat_id: str, model_id: str) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞"""
        headers = {"Authorization": f"Bearer {access_token}"}
        data = {"model": model_id}

        return await self._make_request(f"v2/chat/{chat_id}/settings", "PATCH", headers, data)

    async def whisper(self, access_token: str, file_path: str, method: str = "transcriptions") -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ BotHub API

        Args:
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            method: –ú–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è ('transcriptions' –∏–ª–∏ 'translations')

        Returns:
            str: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        headers = {"Authorization": f"Bearer {access_token}"}

        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            form = aiohttp.FormData()
            form.add_field('model', 'whisper-1')
            form.add_field('file', open(file_path, 'rb'))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        f"{self.api_url}/api/v2/openai/v1/audio/{method}{self.request_query}",
                        headers=headers,
                        data=form
                ) as response:
                    if response.status >= 400:
                        error_text = await response.text()
                        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏: HTTP {response.status}, {error_text}")

                    result = await response.json()

                    if "text" not in result:
                        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞—É–¥–∏–æ")

                    return result["text"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}", exc_info=True)
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {str(e)}")