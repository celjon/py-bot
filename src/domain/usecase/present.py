from src.domain.entity.user import User
from src.domain.entity.present import Present
from src.adapter.repository.present_repository import PresentRepository
from src.adapter.gateway.bothub_gateway import BothubGateway
from typing import Dict, Any, List, Optional, Tuple
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


class PresentUseCase:
    """–Æ–∑–∫–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self, repository: PresentRepository, gateway: BothubGateway, bot=None):
        self.repository = repository
        self.gateway = gateway
        self.bot = bot  # –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    async def add_present(self, user: User, tokens: int) -> Present:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            tokens: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤

        Returns:
            Present: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
        """
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        present = Present(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_id=user.id,
            tokens=tokens,
            notified=False,
            parsed_at=datetime.now()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        present_id = await self.repository.save(present)
        present.id = present_id

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Telegram ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user.telegram_id and self.bot:
            await self.notify_present(present)

        return present

    async def notify_present(self, present: Present) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥–∞—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤

        Args:
            present: –ü–æ–¥–∞—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        """
        if present.notified:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from src.adapter.repository.user_repository import UserRepository
            user_repository = UserRepository(self.repository.db_path)
            user = await user_repository.find_by_id(present.user_id)

            if not user or not user.telegram_id:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {present.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç Telegram ID")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.bot:
                await self.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üéÅ –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ {present.tokens} —Ç–æ–∫–µ–Ω–æ–≤!",
                    parse_mode="Markdown"
                )

            # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π
            present.notified = True
            present.notified_at = datetime.now()
            await self.repository.update(present)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {present.user_id} –æ –ø–æ–¥–∞—Ä–∫–µ {present.tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ: {e}", exc_info=True)

    async def send_notifications(self, user: User) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        if not user.telegram_id or not self.bot:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        presents = await self.repository.find_unnotified_by_user_id(user.id)

        for present in presents:
            await self.notify_present(present)

    async def send_present(self, from_user: User, to_user_id_or_email: str, tokens: int) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            from_user: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            to_user_id_or_email: ID –∏–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            tokens: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç {from_user.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id_or_email}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å email –∏–ª–∏ username
            import re
            is_email = bool(re.match(r"[^@]+@[^@]+\.[^@]+", to_user_id_or_email))
            is_username = to_user_id_or_email.startswith('@')

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            access_token = await self.gateway.get_access_token(from_user)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ BotHub API
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API BotHub –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "success": True,
                "from_user_id": from_user.id,
                "to_user": to_user_id_or_email,
                "tokens": tokens,
                "is_email": is_email
            }

            # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–∞—Ä–∫–µ –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}", exc_info=True)
            return {
                "success": False,
                "error": str(e)
            }

    async def verify_present_format(self, text: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞

        Args:
            text: –¢–µ–∫—Å—Ç (email –∏–ª–∏ username)

        Returns:
            Tuple[bool, str]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        import re

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
        if re.match(r"[^@]+@[^@]+\.[^@]+", text):
            return True, ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username
        if text.startswith('@') and len(text) > 1:
            return True, ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username –±–µ–∑ @
        if re.match(r"^[a-zA-Z0-9_]+$", text):
            # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            return True, "@" + text if not text.startswith('@') else text

        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ username –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)."