import logging
from typing import List, Dict, Any, Optional, Tuple
from src.domain.entity.user import User
from src.domain.entity.chat import Chat
from src.adapter.repository.chat_repository import ChatRepository
from src.adapter.gateway.bothub_gateway import BothubGateway

logger = logging.getLogger(__name__)


class ChatService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏"""

    # –≠–º–æ–¥–∑–∏-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
    CHAT_BUTTONS = {'1Ô∏è‚É£': 1, '2Ô∏è‚É£': 2, '3Ô∏è‚É£': 3, '4Ô∏è‚É£': 4, 'üìù': 5}

    def __init__(self, repository: ChatRepository, gateway: BothubGateway):
        self.repository = repository
        self.gateway = gateway

    async def get_or_create_chat(self, user: User) -> Chat:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        Returns:
            Chat: –ß–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        chat = await self.repository.find_by_user_id_and_chat_index(
            user.id,
            user.current_chat_index
        )

        if not chat:
            chat = Chat(
                id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                user_id=user.id,
                chat_index=user.current_chat_index,
                name=self._get_default_chat_name(user.current_chat_index)
            )

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—è—Ç–æ–≥–æ —á–∞—Ç–∞ (üìù)
            if user.current_chat_index == 5:
                chat.context_remember = False
                chat.system_prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª—å."

            chat_id = await self.repository.save(chat)
            chat.id = chat_id

        return chat

    def _get_default_chat_name(self, chat_index: int) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —á–∞—Ç–∞

        Args:
            chat_index: –ò–Ω–¥–µ–∫—Å —á–∞—Ç–∞

        Returns:
            Optional[str]: –ò–º—è —á–∞—Ç–∞ –∏–ª–∏ None
        """
        for emoji, index in self.CHAT_BUTTONS.items():
            if index == chat_index:
                return emoji
        return None

    def get_chat_buttons(self, current_chat_index: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

        Args:
            current_chat_index: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —á–∞—Ç–∞

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–æ–≤
        """
        chat_buttons = []
        for key, value in self.CHAT_BUTTONS.items():
            if value == current_chat_index:
                chat_buttons.append(key + '‚úÖ')
            else:
                chat_buttons.append(key)
        return chat_buttons

    async def create_new_chat(self, user: User, name: Optional[str] = None) -> Chat:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —á–∞—Ç–∞

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Chat: –°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —á–∞—Ç–∞
        last_chat_index = await self.repository.get_last_chat_index(user.id)

        # –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –±—É–¥–µ—Ç –Ω–∞ 1 –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        new_chat_index = last_chat_index + 1

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        chat = Chat(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_id=user.id,
            chat_index=new_chat_index,
            name=name,
            context_remember=True,
            links_parse=False,
            formula_to_image=False,
            answer_to_voice=False
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        chat_id = await self.repository.save(chat)
        chat.id = chat_id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.current_chat_index = new_chat_index

        return chat

    async def switch_chat(self, user: User, chat_index: int) -> Optional[Chat]:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            chat_index: –ò–Ω–¥–µ–∫—Å —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è

        Returns:
            Optional[Chat]: –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ None, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Ç (1-5)
        if chat_index <= 5:
            user.current_chat_index = chat_index
            return await self.get_or_create_chat(user)
        else:
            chat = await self.repository.find_by_user_id_and_chat_index(user.id, chat_index)
            if chat:
                user.current_chat_index = chat_index
                return chat
            return None

    async def get_chat_list(self, user: User, page: int = 1, items_per_page: int = 5) -> Tuple[List[Chat], int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        Returns:
            Tuple[List[Chat], int]: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        """
        chats = await self.repository.get_paginated_chats(user.id, page, items_per_page)
        total_pages = await self.repository.get_total_pages(user.id, items_per_page)

        return chats, total_pages

    def parse_chat_button(self, button_text: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞

        Args:
            button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

        Returns:
            Optional[int]: –ò–Ω–¥–µ–∫—Å —á–∞—Ç–∞ –∏–ª–∏ None
        """
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        button_text = button_text.replace('‚úÖ', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
        return self.CHAT_BUTTONS.get(button_text)

    async def reset_context(self, user: User, chat: Chat) -> None:
        """
        –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            chat: –ß–∞—Ç
        """
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ BotHub
            await self.gateway.reset_context(user, chat)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chat.reset_context_counter()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.repository.update(chat)

            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat.chat_index} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            raise e

    async def update_chat_settings(self, chat: Chat,
                                   context_remember: Optional[bool] = None,
                                   links_parse: Optional[bool] = None,
                                   formula_to_image: Optional[bool] = None,
                                   answer_to_voice: Optional[bool] = None,
                                   name: Optional[str] = None,
                                   system_prompt: Optional[str] = None) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞

        Args:
            chat: –ß–∞—Ç
            context_remember: –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            links_parse: –ü–∞—Ä—Å–∏—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏
            formula_to_image: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ä–º—É–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            answer_to_voice: –û—Ç–≤–µ—á–∞—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–º
            name: –ò–º—è —á–∞—Ç–∞
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
        if context_remember is not None:
            chat.context_remember = context_remember
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if not context_remember:
                chat.reset_context_counter()

        if links_parse is not None:
            chat.links_parse = links_parse

        if formula_to_image is not None:
            chat.formula_to_image = formula_to_image

        if answer_to_voice is not None:
            chat.answer_to_voice = answer_to_voice

        if name is not None:
            chat.name = name

        if system_prompt is not None:
            chat.system_prompt = system_prompt

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await self.repository.update(chat)