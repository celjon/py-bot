import re
from enum import Enum
from typing import Dict, Tuple, List, Any, Optional, Set
import logging

logger = logging.getLogger(__name__)


class IntentType(Enum):
    CHAT = "chat"  # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
    WEB_SEARCH = "web_search"  # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    IMAGE_GENERATION = "image_generation"  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


class IntentDetectionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self):
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        self.web_search_keywords = [
            r"\b(–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏|–∑–∞–≥—É–≥–ª–∏|–ø–æ–≥—É–≥–ª–∏|search|find|google)\b",
            r"\b—á—Ç–æ —Ç–∞–∫–æ–µ\b",
            r"\b–∫—Ç–æ —Ç–∞–∫–æ–π\b",
            r"\b—á—Ç–æ –∑–Ω–∞—á–∏—Ç\b",
            r"\b–∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è\b",
            r"\b–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ\b",
            r"\bweb[- ]?search\b",
            r"\binfo about\b",
            r"\blook up\b",
            r"\b–∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ\b",
            r"\b–≤ –∫–∞–∫–æ–º –≥–æ–¥—É\b",
            r"\b—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç\b",
            r"\b–∫–∞–∫–∞—è –¥–∞—Ç–∞\b",
            r"\b–∫–æ–≥–¥–∞ –±—ã–ª\b",
            r"\b–∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è\b",
            r"\b–∫–æ–≥–¥–∞ —É–º–µ—Ä\b",
            r"\b–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è\b",
            r"\b—Å–æ–±—ã—Ç–∏—è\b",
            r"\b–∏—Å—Ç–æ—Ä–∏—è\b",
            r"\b–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\b",
            r"\b–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\b",
            r"\b—Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ\b",
            r"\b–Ω–æ–≤–æ—Å—Ç–∏\b",
            r"\b–∫—É—Ä—Å\b",
        ]

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.image_generation_keywords = [
            r"\b(–Ω–∞—Ä–∏—Å—É–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–æ–∑–¥–∞–π|–∏–∑–æ–±—Ä–∞–∑–∏|draw|generate|create|picture|image|imagine|visualize)\b.*\b(–∫–∞—Ä—Ç–∏–Ω–∫—É|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—Ñ–æ—Ç–æ|—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é|–∞—Ä—Ç)\b",
            r"\b–Ω–∞—Ä–∏—Å—É–π\b",
            r"\b—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π\b",
            r"\b—Å–æ–∑–¥–∞–π\b",
            r"\b–∏–∑–æ–±—Ä–∞–∑–∏\b",
            r"\bdraw\b",
            r"\bgenerate image\b",
            r"\bcreate image\b",
            r"\bpicture of\b",
            r"\bvisualize\b",
            r"\bimagine\b",
            r"\bpaint\b",
            r"\billustrate\b",
            r"\bmidjourney\b",
            r"\bdalle\b",
            r"\bdall-e\b",
            r"\bstable diffusion\b",
        ]

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        self.context = {}

        # –ù–∞–±–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è
        self.detected_keywords = set()

    def detect_intent(self, text: str, user_id: Optional[str] = None,
                      chat_context: Optional[List[Dict[str, Any]]] = None) -> Tuple[IntentType, Dict[str, Any]]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
            chat_context: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)

        Returns:
            Tuple[IntentType, Dict[str, Any]]: –¢–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
        text_lower = text.lower()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
        detected_keywords = set()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        for pattern in self.web_search_keywords:
            if re.search(pattern, text_lower, re.IGNORECASE):
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                matched = re.search(pattern, text_lower, re.IGNORECASE)
                detected_keywords.add(matched.group(0))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
                search_query = self._extract_search_query(text_lower, pattern)
                logger.info(f"Detected web search intent with keywords: {detected_keywords}")
                return IntentType.WEB_SEARCH, {"query": search_query or text,
                                               "detected_keywords": list(detected_keywords)}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è: '{text}'")

        # –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if any(re.search(pattern, text_lower, re.IGNORECASE) for pattern in self.image_generation_keywords):
            matched_patterns = []
            for pattern in self.image_generation_keywords:
                if re.search(pattern, text_lower, re.IGNORECASE):
                    matched = re.search(pattern, text_lower, re.IGNORECASE)
                    matched_patterns.append(matched.group(0))

            logger.info(f"üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {matched_patterns}")
            image_prompt = self._extract_image_prompt(text_lower, matched_patterns[0])
            logger.info(f"üé® –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{image_prompt}'")

            return IntentType.IMAGE_GENERATION, {"prompt": image_prompt or text, "detected_keywords": matched_patterns}

        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if user_id and chat_context and user_id in self.context:
            previous_intent = self.context.get(user_id, {}).get('last_intent')
            if previous_intent:
                # –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
                # –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
                if len(text_lower.split()) <= 5 or text_lower.startswith(('–¥–∞', '–Ω–µ—Ç', '–∫–æ–Ω–µ—á–Ω–æ', 'yes', 'no', 'sure')):
                    logger.info(f"Continuing previous intent: {previous_intent}")
                    if previous_intent == IntentType.WEB_SEARCH:
                        return IntentType.WEB_SEARCH, {"query": text, "context_continuation": True}
                    elif previous_intent == IntentType.IMAGE_GENERATION:
                        return IntentType.IMAGE_GENERATION, {"prompt": text, "context_continuation": True}

        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
        logger.info("No specific intent detected, defaulting to chat")
        return IntentType.CHAT, {"message": text}

    def _extract_search_query(self, text: str, pattern: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –ü—Ä–∏–º–µ—Ä: "–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü—É—à–∫–∏–Ω–µ" -> "–ü—É—à–∫–∏–Ω"

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            pattern: –®–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–º—É –Ω–∞–º–µ—Ä–µ–Ω–∏—é

        Returns:
            Optional[str]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ None
        """
        match = re.search(pattern, text, re.IGNORECASE)
        if not match:
            return None

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        start_pos = match.end()
        query = text[start_pos:].strip()

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if query:
            return query

        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        return text

    def _extract_image_prompt(self, text: str, pattern: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –ü—Ä–∏–º–µ—Ä: "–Ω–∞—Ä–∏—Å—É–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º" -> "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            pattern: –®–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            Optional[str]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ None
        """
        match = re.search(pattern, text, re.IGNORECASE)
        if not match:
            return None

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        start_pos = match.end()
        prompt = text[start_pos:].strip()

        # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if prompt:
            return prompt

        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        return re.sub(pattern, '', text, flags=re.IGNORECASE).strip()

    def update_user_context(self, user_id: str, intent_type: IntentType, intent_data: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent_type: –¢–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            intent_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        """
        if not user_id:
            return

        if user_id not in self.context:
            self.context[user_id] = {}

        self.context[user_id]['last_intent'] = intent_type
        self.context[user_id]['last_data'] = intent_data

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(self.context) > 1000:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_keys = list(self.context.keys())[:100]
            for key in oldest_keys:
                del self.context[key]